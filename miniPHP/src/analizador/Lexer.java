/* The following code was generated by JFlex 1.4.3 on 5/04/18 11:09 AM */

package analizador;
import static analizador.Token.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 5/04/18 11:09 AM from the specification file
 * <tt>C:/Users/Pimentel/Desktop/proyecto automatas/3ra version/miniPHP2/src/analizador/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\100\1\77\2\0\1\100\22\0\1\100\1\26\1\70\1\0"+
    "\1\4\1\25\1\16\1\71\1\10\1\11\1\22\1\21\1\6\1\23"+
    "\1\5\1\24\1\72\1\67\10\2\1\7\1\3\1\27\1\20\1\30"+
    "\1\17\1\0\1\74\1\75\2\74\1\76\1\74\5\1\1\60\1\1"+
    "\1\56\6\1\1\57\2\1\1\73\2\1\1\14\1\0\1\15\1\0"+
    "\1\61\1\0\1\31\1\51\1\50\1\33\1\42\1\41\1\54\1\46"+
    "\1\40\1\66\1\52\1\43\1\62\1\32\1\35\1\55\1\65\1\36"+
    "\1\44\1\47\1\53\1\64\1\45\1\34\1\63\1\1\1\12\1\37"+
    "\1\13\1\0\201\1\uff00\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\5\22\1\23\2\24\6\2\1\1\22\2"+
    "\2\1\1\3\1\25\2\0\7\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\3\0\1\24\1\0\1\24\4\0"+
    "\2\2\1\35\4\2\1\36\3\2\1\30\3\2\1\37"+
    "\42\2\1\0\1\40\5\0\14\26\2\0\1\41\6\0"+
    "\1\42\3\2\1\43\16\2\1\44\42\2\2\3\2\45"+
    "\14\26\1\0\1\41\6\0\3\2\1\46\23\2\1\47"+
    "\1\50\4\2\1\51\1\2\1\52\15\2\1\53\6\26"+
    "\1\54\3\26\2\0\1\55\2\0\15\2\1\35\11\2"+
    "\1\56\1\57\1\2\1\60\1\61\2\2\1\62\5\2"+
    "\6\26\1\0\1\54\3\0\3\26\1\0\1\41\3\2"+
    "\1\63\13\2\1\64\1\65\1\66\1\0\1\2\1\67"+
    "\3\2\1\70\2\2\3\26\1\0\3\26\1\0\1\71"+
    "\1\35\1\2\1\72\1\2\1\73\4\2\1\74\1\75"+
    "\2\2\1\76\3\2\3\26\1\0\1\26\3\2\1\77"+
    "\2\2\1\100\1\101\4\2\3\26\4\2\1\102\1\103"+
    "\3\2\3\26\1\104\3\2\1\0\1\105\3\0\2\26"+
    "\3\2\1\0\2\26\2\2\3\0\1\26\3\0\1\26"+
    "\2\0\1\26\1\0\1\26\1\106\4\26";

  private static int [] zzUnpackAction() {
    int [] result = new int[471];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\101\0\202\0\303\0\101\0\u0104\0\u0145\0\101"+
    "\0\101\0\101\0\101\0\101\0\101\0\101\0\101\0\u0186"+
    "\0\u01c7\0\u0208\0\u0249\0\u028a\0\u02cb\0\u030c\0\u034d\0\u038e"+
    "\0\u03cf\0\u0410\0\u0451\0\u0492\0\u04d3\0\u0514\0\u0555\0\u0596"+
    "\0\u05d7\0\u0618\0\u0659\0\u069a\0\u06db\0\u071c\0\u075d\0\u079e"+
    "\0\u07df\0\u0820\0\u0861\0\u08a2\0\u08e3\0\u0924\0\u0965\0\u09a6"+
    "\0\u09e7\0\u0a28\0\u0a69\0\u0aaa\0\u0aeb\0\u0b2c\0\101\0\u0b6d"+
    "\0\u0bae\0\u0bef\0\u0c30\0\u0c71\0\u0cb2\0\u0cf3\0\u0d34\0\u0d75"+
    "\0\101\0\101\0\101\0\101\0\101\0\101\0\u0db6\0\u0df7"+
    "\0\u0e38\0\u0e79\0\u0eba\0\101\0\u0efb\0\u0f3c\0\u0f7d\0\u0fbe"+
    "\0\u0fff\0\u1040\0\202\0\u1081\0\u10c2\0\u1103\0\u1144\0\202"+
    "\0\u1185\0\u11c6\0\u1207\0\202\0\u1248\0\u1289\0\u12ca\0\202"+
    "\0\u130b\0\u134c\0\u138d\0\u13ce\0\u140f\0\u1450\0\u1491\0\u14d2"+
    "\0\u1513\0\u1554\0\u1595\0\u15d6\0\u1617\0\u1658\0\u1699\0\u16da"+
    "\0\u171b\0\u175c\0\u179d\0\u17de\0\u181f\0\u1860\0\u18a1\0\u18e2"+
    "\0\u1923\0\u1964\0\u19a5\0\u19e6\0\u1a27\0\u1a68\0\u1aa9\0\u1aea"+
    "\0\u1b2b\0\u1b6c\0\u0aaa\0\101\0\u0aeb\0\u1bad\0\u1bee\0\u1c2f"+
    "\0\u1c70\0\u1cb1\0\u1cf2\0\u1d33\0\u1d74\0\u1db5\0\u1df6\0\u1e37"+
    "\0\u1e78\0\u1eb9\0\u1efa\0\u1f3b\0\u1f7c\0\u1fbd\0\u1ffe\0\101"+
    "\0\u203f\0\u2080\0\u20c1\0\u2102\0\u2143\0\u2184\0\101\0\u21c5"+
    "\0\u2206\0\u2247\0\202\0\u2288\0\u22c9\0\u230a\0\u234b\0\u238c"+
    "\0\u23cd\0\u240e\0\u244f\0\u2490\0\u24d1\0\u2512\0\u2553\0\u2594"+
    "\0\u25d5\0\u2616\0\u2657\0\u2698\0\u26d9\0\u271a\0\u275b\0\u279c"+
    "\0\u27dd\0\u281e\0\u285f\0\u28a0\0\u28e1\0\u2922\0\u2963\0\u29a4"+
    "\0\u29e5\0\u2a26\0\u2a67\0\u2aa8\0\u2ae9\0\u2b2a\0\u2b6b\0\u2bac"+
    "\0\u2bed\0\u2c2e\0\u2c6f\0\u2cb0\0\u2cf1\0\u2d32\0\u2d73\0\u2db4"+
    "\0\u2df5\0\u2e36\0\u2e77\0\u2eb8\0\u1bad\0\u1bee\0\u1c2f\0\u1c70"+
    "\0\u2ef9\0\u2f3a\0\u2f7b\0\u2fbc\0\u2ffd\0\u303e\0\u307f\0\u30c0"+
    "\0\u3101\0\u3142\0\u3183\0\u31c4\0\u3205\0\u1fbd\0\u3246\0\u3287"+
    "\0\u32c8\0\u3309\0\u334a\0\u338b\0\u33cc\0\u340d\0\u344e\0\202"+
    "\0\u348f\0\u34d0\0\u3511\0\u3552\0\u3593\0\u35d4\0\u3615\0\u3656"+
    "\0\u3697\0\u36d8\0\u3719\0\u375a\0\u379b\0\u37dc\0\u381d\0\u385e"+
    "\0\u389f\0\u38e0\0\u3921\0\u3962\0\202\0\u39a3\0\u39e4\0\u3a25"+
    "\0\u3a66\0\202\0\u3aa7\0\202\0\u3ae8\0\u3b29\0\u3b6a\0\u3bab"+
    "\0\u3bec\0\u3c2d\0\u3c6e\0\u3caf\0\u3cf0\0\u3d31\0\u3d72\0\u3db3"+
    "\0\u3df4\0\u0bef\0\u3e35\0\u3e76\0\u3eb7\0\u3ef8\0\u3f39\0\u3f7a"+
    "\0\u3fbb\0\u3ffc\0\u403d\0\u407e\0\u40bf\0\u4100\0\101\0\u4141"+
    "\0\u4182\0\u41c3\0\u4204\0\u4245\0\u4286\0\u42c7\0\u4308\0\u4349"+
    "\0\u438a\0\u43cb\0\u440c\0\u444d\0\u448e\0\u44cf\0\u4510\0\u4551"+
    "\0\u4592\0\u45d3\0\u4614\0\u4655\0\u4696\0\u46d7\0\u4718\0\u4759"+
    "\0\202\0\u479a\0\u47db\0\202\0\202\0\u481c\0\u485d\0\202"+
    "\0\u489e\0\u48df\0\u4920\0\u4961\0\u49a2\0\u49e3\0\u4a24\0\u4a65"+
    "\0\u4aa6\0\u4ae7\0\u4b28\0\u4b69\0\101\0\u4baa\0\u4beb\0\u4c2c"+
    "\0\u4c6d\0\u4cae\0\u4cef\0\u4d30\0\u40bf\0\u4d71\0\u4db2\0\u4df3"+
    "\0\202\0\u4e34\0\u4e75\0\u4eb6\0\u4ef7\0\u4f38\0\u4f79\0\u4fba"+
    "\0\u4ffb\0\u503c\0\u507d\0\u50be\0\202\0\202\0\202\0\u50ff"+
    "\0\u5140\0\202\0\u5181\0\u51c2\0\u5203\0\202\0\u5244\0\u5285"+
    "\0\u52c6\0\u5307\0\u5348\0\u5389\0\u53ca\0\u540b\0\u544c\0\u548d"+
    "\0\202\0\u54ce\0\u550f\0\u54ce\0\u5550\0\202\0\u5591\0\u55d2"+
    "\0\u5613\0\u5654\0\202\0\u5695\0\u56d6\0\u5717\0\202\0\u5758"+
    "\0\u5799\0\u57da\0\u581b\0\u585c\0\u589d\0\u58de\0\u591f\0\u5960"+
    "\0\u59a1\0\u59e2\0\202\0\u5a23\0\u5a64\0\202\0\202\0\u5aa5"+
    "\0\u5ae6\0\u5b27\0\u5b68\0\u5ba9\0\u5bea\0\u5c2b\0\u5c6c\0\u5cad"+
    "\0\u5cee\0\u5d2f\0\202\0\202\0\u5d70\0\u5db1\0\u5df2\0\u5e33"+
    "\0\u5e74\0\u5eb5\0\202\0\u5ef6\0\u5f37\0\u5f78\0\u5fb9\0\101"+
    "\0\u5ffa\0\u603b\0\u607c\0\u60bd\0\u60fe\0\u613f\0\u6180\0\u61c1"+
    "\0\u6202\0\u6243\0\u6284\0\u62c5\0\u6306\0\u6347\0\u6388\0\u63c9"+
    "\0\u640a\0\u644b\0\u648c\0\u64cd\0\u650e\0\u654f\0\u6590\0\u65d1"+
    "\0\u6612\0\u6653\0\101\0\u6694\0\u66d5\0\u6716\0\u6757";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[471];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\3\1\54\1\55\1\56\1\57\2\3"+
    "\1\60\1\61\1\62\1\63\2\3\1\4\1\64\1\65"+
    "\1\66\4\3\2\67\102\0\2\3\26\0\6\3\1\0"+
    "\30\3\2\0\5\3\4\0\1\4\2\0\1\70\34\0"+
    "\1\71\24\0\1\4\2\0\1\4\3\0\1\71\3\0"+
    "\1\72\27\0\1\73\4\72\1\74\1\0\6\72\1\75"+
    "\5\72\1\76\1\77\3\72\1\100\5\72\4\0\4\72"+
    "\22\0\1\101\76\0\1\102\112\0\1\103\70\0\1\32"+
    "\7\0\1\104\52\0\1\4\15\0\1\105\1\106\45\0"+
    "\1\4\2\0\1\66\26\0\1\105\1\0\1\27\60\0"+
    "\1\4\15\0\1\105\2\0\1\106\43\0\1\4\2\0"+
    "\1\66\26\0\1\105\1\0\1\107\1\0\1\110\74\0"+
    "\1\105\100\0\1\32\77\0\1\111\1\112\3\0\1\113"+
    "\3\0\1\114\10\0\1\115\4\0\1\116\1\117\5\0"+
    "\1\120\43\0\1\114\61\0\2\3\26\0\1\3\1\121"+
    "\3\3\1\122\1\0\4\3\1\123\4\3\1\124\16\3"+
    "\2\0\5\3\3\0\2\3\26\0\1\125\5\3\1\0"+
    "\2\3\1\126\10\3\1\127\14\3\2\0\5\3\3\0"+
    "\2\3\26\0\4\3\1\130\1\3\1\0\1\131\1\3"+
    "\1\132\25\3\2\0\5\3\3\0\2\3\26\0\4\3"+
    "\1\133\1\3\1\0\30\3\2\0\5\3\3\0\2\3"+
    "\26\0\5\3\1\134\1\0\11\3\1\135\16\3\2\0"+
    "\5\3\3\0\2\3\26\0\6\3\1\0\2\3\1\136"+
    "\25\3\2\0\5\3\41\0\1\102\42\0\2\3\26\0"+
    "\1\3\1\137\4\3\1\0\1\3\1\140\2\3\1\141"+
    "\2\3\1\142\12\3\1\143\5\3\2\0\5\3\3\0"+
    "\2\3\26\0\1\144\3\3\1\145\1\3\1\0\1\146"+
    "\12\3\1\147\14\3\2\0\5\3\3\0\2\3\26\0"+
    "\1\3\1\150\1\3\1\151\2\3\1\0\3\3\1\152"+
    "\4\3\1\153\11\3\1\154\1\3\1\155\3\3\2\0"+
    "\5\3\3\0\2\3\26\0\6\3\1\0\1\156\27\3"+
    "\2\0\5\3\3\0\2\3\26\0\6\3\1\0\5\3"+
    "\1\157\1\3\1\160\20\3\2\0\5\3\3\0\2\3"+
    "\26\0\6\3\1\0\6\3\1\161\21\3\2\0\5\3"+
    "\3\0\2\3\26\0\6\3\1\0\2\3\1\162\25\3"+
    "\2\0\5\3\3\0\2\3\26\0\5\3\1\163\1\0"+
    "\6\3\1\164\21\3\2\0\5\3\3\0\2\3\26\0"+
    "\1\165\3\3\1\166\1\3\1\0\3\3\1\167\24\3"+
    "\2\0\5\3\3\0\2\3\26\0\5\3\1\170\1\0"+
    "\30\3\2\0\5\3\3\0\2\3\26\0\1\3\1\141"+
    "\4\3\1\0\4\3\1\131\23\3\2\0\5\3\3\0"+
    "\2\3\26\0\4\3\1\171\1\3\1\0\3\3\1\172"+
    "\24\3\2\0\5\3\3\0\2\3\26\0\5\3\1\173"+
    "\1\0\13\3\1\174\14\3\2\0\5\3\3\0\2\3"+
    "\26\0\6\3\1\0\17\3\1\175\10\3\2\0\5\3"+
    "\3\0\2\3\26\0\6\3\1\0\21\3\1\176\6\3"+
    "\2\0\5\3\3\0\2\3\26\0\6\3\1\0\23\3"+
    "\1\177\4\3\2\0\5\3\3\0\2\3\26\0\6\3"+
    "\1\0\1\200\27\3\2\0\5\3\3\0\2\3\26\0"+
    "\1\201\3\3\1\202\1\3\1\0\30\3\2\0\5\3"+
    "\2\0\70\203\1\204\10\203\71\205\1\204\7\205\2\0"+
    "\1\4\2\0\1\70\26\0\1\206\5\0\1\71\6\0"+
    "\1\207\15\0\1\4\2\0\1\4\1\206\1\0\1\207"+
    "\1\71\4\0\1\210\64\0\1\210\2\0\1\210\27\0"+
    "\1\211\1\0\1\211\56\0\2\72\26\0\6\72\1\0"+
    "\30\72\2\0\5\72\3\0\2\72\26\0\5\72\1\212"+
    "\1\0\30\72\2\0\5\72\3\0\2\72\26\0\6\72"+
    "\1\0\2\72\1\213\25\72\2\0\5\72\3\0\2\72"+
    "\26\0\6\72\1\0\7\72\1\214\20\72\2\0\5\72"+
    "\3\0\2\72\26\0\6\72\1\0\3\72\1\215\24\72"+
    "\2\0\5\72\3\0\2\72\26\0\6\72\1\0\6\72"+
    "\1\216\21\72\2\0\5\72\3\0\2\72\26\0\5\72"+
    "\1\217\1\0\1\72\1\220\1\221\1\72\1\222\3\72"+
    "\1\223\3\72\1\224\1\225\12\72\2\0\5\72\2\0"+
    "\22\226\1\227\54\226\2\107\77\110\1\230\1\110\55\0"+
    "\1\231\53\0\1\114\111\0\1\115\4\0\1\116\1\117"+
    "\1\0\1\232\3\0\1\120\60\0\1\233\105\0\1\234"+
    "\4\0\1\235\17\0\1\120\42\0\1\236\1\0\1\120"+
    "\2\0\1\120\72\0\1\237\51\0\2\3\26\0\2\3"+
    "\1\134\3\3\1\0\30\3\2\0\5\3\3\0\2\3"+
    "\26\0\5\3\1\240\1\0\30\3\2\0\5\3\3\0"+
    "\2\3\26\0\6\3\1\0\4\3\1\241\23\3\2\0"+
    "\5\3\3\0\2\3\26\0\6\3\1\0\22\3\1\242"+
    "\5\3\2\0\5\3\3\0\2\3\26\0\6\3\1\0"+
    "\5\3\1\243\22\3\2\0\5\3\3\0\2\3\26\0"+
    "\6\3\1\0\3\3\1\244\24\3\2\0\5\3\3\0"+
    "\2\3\26\0\6\3\1\0\2\3\1\123\25\3\2\0"+
    "\5\3\3\0\2\3\26\0\6\3\1\0\1\3\1\245"+
    "\6\3\1\246\17\3\2\0\5\3\3\0\2\3\26\0"+
    "\5\3\1\134\1\0\30\3\2\0\5\3\3\0\2\3"+
    "\26\0\6\3\1\0\26\3\1\247\1\3\2\0\5\3"+
    "\3\0\2\3\26\0\6\3\1\0\4\3\1\250\2\3"+
    "\1\251\15\3\1\252\2\3\2\0\5\3\3\0\2\3"+
    "\26\0\6\3\1\0\4\3\1\253\2\3\1\254\1\255"+
    "\17\3\2\0\5\3\3\0\2\3\26\0\6\3\1\0"+
    "\4\3\1\256\23\3\2\0\5\3\3\0\2\3\26\0"+
    "\6\3\1\0\2\3\1\257\25\3\2\0\5\3\3\0"+
    "\2\3\26\0\6\3\1\0\15\3\1\260\12\3\2\0"+
    "\5\3\3\0\2\3\26\0\6\3\1\0\3\3\1\261"+
    "\24\3\2\0\5\3\3\0\2\3\26\0\5\3\1\262"+
    "\1\0\30\3\2\0\5\3\3\0\2\3\26\0\1\3"+
    "\1\263\4\3\1\0\30\3\2\0\5\3\3\0\2\3"+
    "\26\0\1\3\1\264\4\3\1\0\30\3\2\0\5\3"+
    "\3\0\2\3\26\0\2\3\1\265\3\3\1\0\30\3"+
    "\2\0\5\3\3\0\2\3\26\0\6\3\1\0\1\266"+
    "\6\3\1\267\20\3\2\0\5\3\3\0\2\3\26\0"+
    "\6\3\1\0\4\3\1\270\23\3\2\0\5\3\3\0"+
    "\2\3\26\0\6\3\1\0\6\3\1\271\21\3\2\0"+
    "\5\3\3\0\2\3\26\0\6\3\1\0\15\3\1\272"+
    "\12\3\2\0\5\3\3\0\2\3\26\0\1\273\5\3"+
    "\1\0\30\3\2\0\5\3\3\0\2\3\26\0\6\3"+
    "\1\0\4\3\1\266\23\3\2\0\5\3\3\0\2\3"+
    "\26\0\6\3\1\0\1\274\27\3\2\0\5\3\3\0"+
    "\2\3\26\0\1\275\5\3\1\0\30\3\2\0\5\3"+
    "\3\0\2\3\26\0\6\3\1\0\1\276\27\3\2\0"+
    "\5\3\3\0\2\3\26\0\1\277\5\3\1\0\30\3"+
    "\2\0\5\3\3\0\2\3\26\0\1\300\5\3\1\0"+
    "\13\3\1\301\7\3\1\123\4\3\2\0\5\3\3\0"+
    "\2\3\26\0\5\3\1\302\1\0\30\3\2\0\5\3"+
    "\3\0\2\3\26\0\6\3\1\0\3\3\1\303\1\304"+
    "\2\3\1\305\20\3\2\0\5\3\3\0\2\3\26\0"+
    "\1\3\1\306\4\3\1\0\30\3\2\0\5\3\3\0"+
    "\2\3\26\0\1\307\3\3\1\310\1\3\1\0\30\3"+
    "\2\0\5\3\3\0\2\3\26\0\6\3\1\0\2\3"+
    "\1\311\25\3\2\0\5\3\3\0\2\3\26\0\6\3"+
    "\1\0\7\3\1\312\20\3\2\0\5\3\3\0\2\3"+
    "\26\0\4\3\1\313\1\3\1\0\30\3\2\0\5\3"+
    "\3\0\2\3\26\0\4\3\1\314\1\3\1\0\1\315"+
    "\1\3\1\316\25\3\2\0\5\3\3\0\2\3\26\0"+
    "\6\3\1\0\11\3\1\317\16\3\2\0\5\3\3\0"+
    "\2\3\26\0\6\3\1\0\20\3\1\320\7\3\2\0"+
    "\5\3\3\0\2\3\26\0\6\3\1\0\6\3\1\321"+
    "\21\3\2\0\5\3\3\0\2\3\26\0\6\3\1\0"+
    "\4\3\1\322\23\3\2\0\5\3\3\0\2\3\26\0"+
    "\6\3\1\0\2\3\1\323\25\3\2\0\5\3\3\0"+
    "\2\3\26\0\5\3\1\123\1\0\30\3\2\0\5\3"+
    "\3\0\2\3\26\0\6\3\1\0\1\324\27\3\2\0"+
    "\5\3\4\0\1\325\26\0\1\325\1\0\1\325\5\0"+
    "\2\325\5\0\2\325\15\0\1\325\2\0\1\325\1\0"+
    "\3\325\71\0\1\326\2\0\1\326\10\0\1\327\37\0"+
    "\1\71\24\0\1\327\2\0\1\327\3\0\1\71\4\0"+
    "\1\330\64\0\1\330\2\0\1\330\7\0\2\72\26\0"+
    "\6\72\1\0\14\72\1\331\13\72\2\0\5\72\3\0"+
    "\2\72\26\0\6\72\1\0\10\72\1\332\17\72\2\0"+
    "\5\72\3\0\2\72\26\0\6\72\1\0\7\72\1\333"+
    "\20\72\2\0\5\72\3\0\2\72\26\0\4\72\1\334"+
    "\1\72\1\0\30\72\2\0\5\72\3\0\2\72\26\0"+
    "\6\72\1\0\15\72\1\335\12\72\2\0\5\72\3\0"+
    "\2\72\26\0\6\72\1\0\2\72\1\336\25\72\2\0"+
    "\5\72\3\0\2\72\26\0\6\72\1\0\1\337\27\72"+
    "\2\0\5\72\3\0\2\72\26\0\1\72\1\340\4\72"+
    "\1\0\30\72\2\0\5\72\3\0\2\72\26\0\6\72"+
    "\1\0\2\72\1\341\25\72\2\0\5\72\3\0\2\72"+
    "\26\0\4\72\1\342\1\72\1\0\30\72\2\0\5\72"+
    "\3\0\2\72\26\0\6\72\1\0\2\72\1\343\25\72"+
    "\2\0\5\72\3\0\2\72\26\0\4\72\1\344\1\72"+
    "\1\0\30\72\2\0\5\72\2\0\22\226\1\227\54\226"+
    "\1\345\23\226\1\227\1\226\1\346\52\226\1\345\1\226"+
    "\46\0\1\347\67\0\1\350\101\0\1\351\73\0\1\352"+
    "\131\0\1\353\67\0\1\354\30\0\2\3\26\0\1\355"+
    "\5\3\1\0\30\3\2\0\5\3\3\0\2\3\26\0"+
    "\6\3\1\0\7\3\1\356\20\3\2\0\5\3\3\0"+
    "\2\3\26\0\6\3\1\0\2\3\1\357\25\3\2\0"+
    "\5\3\3\0\2\3\26\0\6\3\1\0\3\3\1\360"+
    "\24\3\2\0\5\3\3\0\2\3\26\0\1\361\5\3"+
    "\1\0\30\3\2\0\5\3\3\0\2\3\26\0\6\3"+
    "\1\0\3\3\1\362\24\3\2\0\5\3\3\0\2\3"+
    "\26\0\6\3\1\0\2\3\1\363\25\3\2\0\5\3"+
    "\3\0\2\3\26\0\4\3\1\364\1\3\1\0\30\3"+
    "\2\0\5\3\3\0\2\3\26\0\6\3\1\0\13\3"+
    "\1\365\14\3\2\0\5\3\3\0\2\3\26\0\6\3"+
    "\1\0\13\3\1\366\14\3\2\0\5\3\3\0\2\3"+
    "\26\0\6\3\1\0\7\3\1\367\20\3\2\0\5\3"+
    "\3\0\2\3\26\0\6\3\1\0\2\3\1\370\25\3"+
    "\2\0\5\3\3\0\2\3\26\0\6\3\1\0\3\3"+
    "\1\371\24\3\2\0\5\3\3\0\2\3\26\0\6\3"+
    "\1\0\2\3\1\266\25\3\2\0\5\3\3\0\2\3"+
    "\26\0\5\3\1\372\1\0\30\3\2\0\5\3\3\0"+
    "\2\3\26\0\6\3\1\0\3\3\1\373\24\3\2\0"+
    "\5\3\3\0\2\3\26\0\6\3\1\0\4\3\1\301"+
    "\23\3\2\0\5\3\3\0\2\3\26\0\6\3\1\0"+
    "\2\3\1\374\25\3\2\0\5\3\3\0\2\3\26\0"+
    "\1\375\5\3\1\0\30\3\2\0\5\3\3\0\2\3"+
    "\26\0\6\3\1\0\10\3\1\376\17\3\2\0\5\3"+
    "\3\0\2\3\26\0\2\3\1\377\3\3\1\0\1\3"+
    "\1\u0100\2\3\1\u0101\1\u0102\22\3\2\0\5\3\3\0"+
    "\2\3\26\0\6\3\1\0\7\3\1\123\20\3\2\0"+
    "\5\3\3\0\2\3\26\0\6\3\1\0\2\3\1\u0103"+
    "\25\3\2\0\5\3\3\0\2\3\26\0\6\3\1\0"+
    "\2\3\1\u0104\25\3\2\0\5\3\3\0\2\3\26\0"+
    "\4\3\1\u0105\1\3\1\0\30\3\2\0\5\3\3\0"+
    "\2\3\26\0\6\3\1\0\7\3\1\355\20\3\2\0"+
    "\5\3\3\0\2\3\26\0\6\3\1\0\3\3\1\123"+
    "\24\3\2\0\5\3\3\0\2\3\26\0\6\3\1\0"+
    "\7\3\1\u0106\20\3\2\0\5\3\3\0\2\3\26\0"+
    "\6\3\1\0\7\3\1\u0107\20\3\2\0\5\3\3\0"+
    "\2\3\26\0\6\3\1\0\3\3\1\u0108\24\3\2\0"+
    "\5\3\3\0\2\3\26\0\2\3\1\u0109\3\3\1\0"+
    "\30\3\2\0\5\3\3\0\2\3\26\0\6\3\1\0"+
    "\1\266\27\3\2\0\5\3\3\0\2\3\26\0\6\3"+
    "\1\0\2\3\1\u010a\25\3\2\0\5\3\3\0\2\3"+
    "\26\0\4\3\1\u010b\1\3\1\0\30\3\2\0\5\3"+
    "\3\0\2\3\26\0\6\3\1\0\3\3\1\372\24\3"+
    "\2\0\5\3\3\0\2\3\26\0\6\3\1\0\2\3"+
    "\1\u010c\25\3\2\0\5\3\3\0\2\3\26\0\6\3"+
    "\1\0\10\3\1\u010d\17\3\2\0\5\3\3\0\2\3"+
    "\26\0\6\3\1\0\4\3\1\u010e\2\3\1\u010f\20\3"+
    "\2\0\5\3\3\0\2\3\26\0\6\3\1\0\4\3"+
    "\1\u0110\23\3\2\0\5\3\3\0\2\3\26\0\1\3"+
    "\1\131\4\3\1\0\30\3\2\0\5\3\3\0\2\3"+
    "\26\0\1\u0111\5\3\1\0\30\3\2\0\5\3\3\0"+
    "\2\3\26\0\4\3\1\123\1\3\1\0\30\3\2\0"+
    "\5\3\3\0\2\3\26\0\6\3\1\0\11\3\1\u0112"+
    "\16\3\2\0\5\3\3\0\2\3\26\0\6\3\1\0"+
    "\7\3\1\u0113\20\3\2\0\5\3\3\0\2\3\26\0"+
    "\1\3\1\u0114\4\3\1\0\24\3\1\u0115\3\3\2\0"+
    "\5\3\3\0\2\3\26\0\6\3\1\0\14\3\1\u0116"+
    "\13\3\2\0\5\3\3\0\2\3\26\0\6\3\1\0"+
    "\3\3\1\u0117\24\3\2\0\5\3\3\0\2\3\26\0"+
    "\6\3\1\0\20\3\1\360\7\3\2\0\5\3\3\0"+
    "\2\3\26\0\1\u0118\5\3\1\0\30\3\2\0\5\3"+
    "\3\0\2\3\26\0\6\3\1\0\25\3\1\u0119\2\3"+
    "\2\0\5\3\3\0\2\3\26\0\6\3\1\0\3\3"+
    "\1\324\24\3\2\0\5\3\3\0\2\3\26\0\2\3"+
    "\1\123\3\3\1\0\30\3\2\0\5\3\3\0\2\72"+
    "\26\0\6\72\1\0\10\72\1\u011a\13\72\1\u011a\3\72"+
    "\2\0\5\72\3\0\2\72\26\0\4\72\1\u011b\1\72"+
    "\1\0\30\72\2\0\5\72\3\0\2\72\26\0\6\72"+
    "\1\0\15\72\1\u011c\12\72\2\0\5\72\3\0\2\72"+
    "\26\0\6\72\1\0\11\72\1\u011d\16\72\2\0\5\72"+
    "\3\0\2\72\26\0\6\72\1\0\21\72\1\u011e\6\72"+
    "\2\0\5\72\3\0\2\72\26\0\6\72\1\0\25\72"+
    "\1\u011f\2\72\2\0\5\72\3\0\2\72\26\0\6\72"+
    "\1\0\3\72\1\u0120\24\72\2\0\5\72\3\0\2\72"+
    "\26\0\6\72\1\0\24\72\1\u0121\3\72\2\0\5\72"+
    "\3\0\2\72\26\0\5\72\1\u0122\1\0\4\72\1\u0123"+
    "\23\72\2\0\5\72\3\0\2\72\26\0\4\72\1\u0124"+
    "\1\72\1\0\30\72\2\0\5\72\3\0\2\72\26\0"+
    "\6\72\1\0\7\72\1\u0121\20\72\2\0\5\72\3\0"+
    "\2\72\26\0\6\72\1\0\4\72\1\343\23\72\2\0"+
    "\5\72\2\0\22\u0125\1\u0126\54\u0125\2\345\55\0\1\u0127"+
    "\56\0\1\u0128\127\0\1\120\51\0\1\120\110\0\1\120"+
    "\100\0\1\u0129\36\0\2\3\26\0\6\3\1\0\23\3"+
    "\1\123\4\3\2\0\5\3\3\0\2\3\26\0\5\3"+
    "\1\u012a\1\0\30\3\2\0\5\3\3\0\2\3\26\0"+
    "\6\3\1\0\4\3\1\u012b\23\3\2\0\5\3\3\0"+
    "\2\3\26\0\6\3\1\0\13\3\1\u012c\14\3\2\0"+
    "\5\3\3\0\2\3\26\0\1\u012d\5\3\1\0\30\3"+
    "\2\0\5\3\3\0\2\3\26\0\6\3\1\0\10\3"+
    "\1\266\17\3\2\0\5\3\3\0\2\3\26\0\6\3"+
    "\1\0\13\3\1\u012e\14\3\2\0\5\3\3\0\2\3"+
    "\26\0\5\3\1\u012f\1\0\30\3\2\0\5\3\3\0"+
    "\2\3\26\0\6\3\1\0\1\u0130\27\3\2\0\5\3"+
    "\3\0\2\3\26\0\1\u0131\5\3\1\0\30\3\2\0"+
    "\5\3\3\0\2\3\26\0\5\3\1\u0132\1\0\30\3"+
    "\2\0\5\3\3\0\2\3\26\0\6\3\1\0\13\3"+
    "\1\u0133\14\3\2\0\5\3\3\0\2\3\26\0\1\u0134"+
    "\5\3\1\0\30\3\2\0\5\3\3\0\2\3\26\0"+
    "\6\3\1\0\2\3\1\u0135\25\3\2\0\5\3\3\0"+
    "\2\3\26\0\1\u0136\5\3\1\0\30\3\2\0\5\3"+
    "\3\0\2\3\26\0\6\3\1\0\3\3\1\u0137\24\3"+
    "\2\0\5\3\3\0\2\3\26\0\6\3\1\0\7\3"+
    "\1\u0138\20\3\2\0\5\3\3\0\2\3\26\0\6\3"+
    "\1\0\2\3\1\u0139\25\3\2\0\5\3\3\0\2\3"+
    "\26\0\4\3\1\u013a\1\3\1\0\30\3\2\0\5\3"+
    "\3\0\2\3\26\0\6\3\1\0\5\3\1\u013b\22\3"+
    "\2\0\5\3\3\0\2\3\26\0\6\3\1\0\6\3"+
    "\1\u013c\21\3\2\0\5\3\3\0\2\3\26\0\1\3"+
    "\1\u013d\4\3\1\0\30\3\2\0\5\3\3\0\2\3"+
    "\26\0\6\3\1\0\1\u013e\27\3\2\0\5\3\3\0"+
    "\2\3\26\0\6\3\1\0\10\3\1\u013f\17\3\2\0"+
    "\5\3\3\0\2\3\26\0\6\3\1\0\1\u0140\27\3"+
    "\2\0\5\3\3\0\2\3\26\0\6\3\1\0\2\3"+
    "\1\u0141\25\3\2\0\5\3\3\0\2\3\26\0\6\3"+
    "\1\0\2\3\1\201\25\3\2\0\5\3\3\0\2\3"+
    "\26\0\6\3\1\0\5\3\1\123\22\3\2\0\5\3"+
    "\3\0\2\3\26\0\6\3\1\0\6\3\1\123\21\3"+
    "\2\0\5\3\3\0\2\3\26\0\6\3\1\0\7\3"+
    "\1\u0142\20\3\2\0\5\3\3\0\2\3\26\0\6\3"+
    "\1\0\1\u0143\27\3\2\0\5\3\3\0\2\3\26\0"+
    "\6\3\1\0\4\3\1\u0144\23\3\2\0\5\3\3\0"+
    "\2\3\26\0\6\3\1\0\12\3\1\u0145\15\3\2\0"+
    "\5\3\3\0\2\3\26\0\1\u0146\5\3\1\0\30\3"+
    "\2\0\5\3\3\0\2\3\26\0\6\3\1\0\2\3"+
    "\1\u0147\25\3\2\0\5\3\3\0\2\3\26\0\6\3"+
    "\1\0\7\3\1\u0148\20\3\2\0\5\3\3\0\2\3"+
    "\26\0\1\u0149\5\3\1\0\30\3\2\0\5\3\3\0"+
    "\2\3\26\0\6\3\1\0\21\3\1\u014a\6\3\2\0"+
    "\5\3\3\0\2\3\26\0\6\3\1\0\1\u014b\27\3"+
    "\2\0\5\3\3\0\2\3\26\0\6\3\1\0\3\3"+
    "\1\u014c\24\3\2\0\5\3\3\0\2\3\26\0\6\3"+
    "\1\0\3\3\1\u014d\24\3\2\0\5\3\3\0\2\72"+
    "\26\0\5\72\1\u014e\1\0\30\72\2\0\5\72\3\0"+
    "\2\72\26\0\6\72\1\0\21\72\1\u014f\6\72\2\0"+
    "\5\72\3\0\2\72\26\0\1\u0150\5\72\1\0\30\72"+
    "\2\0\5\72\3\0\2\72\26\0\6\72\1\0\2\72"+
    "\1\u0151\25\72\2\0\5\72\3\0\2\72\26\0\6\72"+
    "\1\0\13\72\1\u0152\14\72\2\0\5\72\3\0\2\72"+
    "\26\0\6\72\1\0\2\72\1\u0153\25\72\2\0\5\72"+
    "\3\0\2\72\11\0\1\u0154\1\u0155\13\0\6\72\1\0"+
    "\30\72\1\u0156\1\u0157\5\72\2\u0158\1\0\2\72\26\0"+
    "\6\72\1\0\24\72\1\u0159\3\72\2\0\5\72\3\0"+
    "\2\72\26\0\6\72\1\0\4\72\1\u015a\23\72\2\0"+
    "\5\72\3\0\2\72\26\0\6\72\1\0\12\72\1\u015b"+
    "\15\72\2\0\5\72\2\0\22\u0125\1\u0126\54\u0125\1\u015c"+
    "\23\u0125\1\u0126\1\u0125\1\u015d\52\u0125\1\u015c\1\u0125\63\0"+
    "\1\120\57\0\1\120\37\0\2\3\26\0\1\363\5\3"+
    "\1\0\30\3\2\0\5\3\3\0\2\3\26\0\6\3"+
    "\1\0\15\3\1\u015e\12\3\2\0\5\3\3\0\2\3"+
    "\26\0\6\3\1\0\3\3\1\u015f\24\3\2\0\5\3"+
    "\3\0\2\3\26\0\5\3\1\131\1\0\30\3\2\0"+
    "\5\3\3\0\2\3\26\0\5\3\1\u0160\1\0\30\3"+
    "\2\0\5\3\3\0\2\3\26\0\1\3\1\u0161\4\3"+
    "\1\0\30\3\2\0\5\3\3\0\2\3\26\0\5\3"+
    "\1\u0162\1\0\30\3\2\0\5\3\3\0\2\3\26\0"+
    "\1\3\1\u0163\4\3\1\0\30\3\2\0\5\3\3\0"+
    "\2\3\26\0\6\3\1\0\1\3\1\u015e\26\3\2\0"+
    "\5\3\3\0\2\3\26\0\2\3\1\u0164\3\3\1\0"+
    "\30\3\2\0\5\3\3\0\2\3\26\0\6\3\1\0"+
    "\11\3\1\u0165\16\3\2\0\5\3\3\0\2\3\26\0"+
    "\6\3\1\0\22\3\1\u0166\5\3\2\0\5\3\3\0"+
    "\2\3\26\0\6\3\1\0\10\3\1\u0167\17\3\2\0"+
    "\5\3\3\0\2\3\26\0\6\3\1\0\3\3\1\355"+
    "\24\3\2\0\5\3\3\0\2\3\26\0\6\3\1\0"+
    "\1\u0168\27\3\2\0\5\3\3\0\2\3\26\0\6\3"+
    "\1\0\10\3\1\246\17\3\2\0\5\3\3\0\2\3"+
    "\26\0\5\3\1\u0169\1\0\30\3\2\0\5\3\3\0"+
    "\2\3\26\0\6\3\1\0\1\u016a\27\3\2\0\5\3"+
    "\3\0\2\3\26\0\6\3\1\0\1\u016b\27\3\2\0"+
    "\5\3\3\0\2\3\26\0\2\3\1\u016c\3\3\1\0"+
    "\30\3\2\0\5\3\3\0\2\3\26\0\6\3\1\0"+
    "\1\3\1\u016d\26\3\2\0\5\3\3\0\2\3\26\0"+
    "\6\3\1\0\6\3\1\u016e\21\3\2\0\5\3\3\0"+
    "\2\3\26\0\6\3\1\0\10\3\1\u016f\17\3\2\0"+
    "\5\3\3\0\2\3\26\0\6\3\1\0\30\3\2\0"+
    "\5\3\2\u0170\1\0\2\3\26\0\1\3\1\u0171\4\3"+
    "\1\0\30\3\2\0\5\3\3\0\2\3\26\0\6\3"+
    "\1\0\3\3\1\u0172\24\3\2\0\5\3\3\0\2\3"+
    "\26\0\6\3\1\0\10\3\1\u0173\17\3\2\0\5\3"+
    "\3\0\2\3\26\0\6\3\1\0\7\3\1\u0174\20\3"+
    "\2\0\5\3\3\0\2\3\26\0\6\3\1\0\22\3"+
    "\1\u0175\5\3\2\0\5\3\3\0\2\3\26\0\6\3"+
    "\1\0\10\3\1\u0176\17\3\2\0\5\3\3\0\2\3"+
    "\26\0\6\3\1\0\7\3\1\u0177\20\3\2\0\5\3"+
    "\3\0\2\3\26\0\6\3\1\0\21\3\1\u0178\6\3"+
    "\2\0\5\3\3\0\2\72\26\0\2\72\1\u0179\3\72"+
    "\1\0\30\72\2\0\5\72\3\0\2\72\26\0\5\72"+
    "\1\u017a\1\0\30\72\2\0\5\72\3\0\2\72\26\0"+
    "\6\72\1\0\3\72\1\u0153\24\72\2\0\5\72\3\0"+
    "\2\72\26\0\5\72\1\u017b\1\0\30\72\2\0\5\72"+
    "\3\0\2\72\26\0\6\72\1\0\2\72\1\344\25\72"+
    "\2\0\5\72\3\0\2\72\26\0\6\72\1\0\4\72"+
    "\1\u0121\23\72\2\0\5\72\16\0\1\u0154\1\u0155\52\0"+
    "\1\u0156\1\u0157\5\0\2\u0158\70\u0156\1\u017c\10\u0156\71\u0157"+
    "\1\u017c\7\u0157\15\0\1\u0155\52\0\1\u0156\1\u0157\5\0"+
    "\2\u0158\1\0\2\72\26\0\6\72\1\0\2\72\1\u017d"+
    "\25\72\2\0\5\72\3\0\2\72\26\0\6\72\1\0"+
    "\1\u017e\27\72\2\0\5\72\3\0\2\72\26\0\6\72"+
    "\1\0\1\u017f\27\72\2\0\5\72\24\0\1\u0180\54\0"+
    "\2\u015c\1\0\2\3\26\0\1\u0160\5\3\1\0\30\3"+
    "\2\0\5\3\3\0\2\3\26\0\6\3\1\0\7\3"+
    "\1\u0181\20\3\2\0\5\3\3\0\2\3\26\0\6\3"+
    "\1\0\10\3\1\131\17\3\2\0\5\3\3\0\2\3"+
    "\26\0\6\3\1\0\2\3\1\u0182\25\3\2\0\5\3"+
    "\3\0\2\3\26\0\6\3\1\0\10\3\1\u0183\17\3"+
    "\2\0\5\3\3\0\2\3\26\0\6\3\1\0\2\3"+
    "\1\u0184\25\3\2\0\5\3\3\0\2\3\26\0\6\3"+
    "\1\0\3\3\1\131\24\3\2\0\5\3\3\0\2\3"+
    "\26\0\6\3\1\0\2\3\1\u0185\25\3\2\0\5\3"+
    "\3\0\2\3\26\0\6\3\1\0\6\3\1\u0186\21\3"+
    "\2\0\5\3\3\0\2\3\26\0\4\3\1\u0187\1\3"+
    "\1\0\30\3\2\0\5\3\3\0\2\3\26\0\6\3"+
    "\1\0\2\3\1\u0188\25\3\2\0\5\3\3\0\2\3"+
    "\26\0\6\3\1\0\7\3\1\u0189\20\3\2\0\5\3"+
    "\3\0\2\3\26\0\6\3\1\0\3\3\1\u018a\24\3"+
    "\2\0\5\3\3\0\2\3\26\0\6\3\1\0\4\3"+
    "\1\u018b\23\3\2\0\5\3\3\0\1\u018c\27\0\6\u018c"+
    "\1\0\27\u018c\4\0\4\u018c\2\u0170\1\0\2\3\26\0"+
    "\6\3\1\0\13\3\1\u018d\14\3\2\0\5\3\3\0"+
    "\2\3\26\0\6\3\1\0\7\3\1\u018e\20\3\2\0"+
    "\5\3\3\0\2\3\26\0\6\3\1\0\2\3\1\u018f"+
    "\25\3\2\0\5\3\3\0\2\3\26\0\1\u0190\5\3"+
    "\1\0\30\3\2\0\5\3\3\0\2\3\26\0\6\3"+
    "\1\0\21\3\1\u0191\6\3\2\0\5\3\3\0\2\3"+
    "\26\0\6\3\1\0\25\3\1\u0192\2\3\2\0\5\3"+
    "\3\0\2\72\26\0\6\72\1\0\4\72\1\u0193\23\72"+
    "\2\0\5\72\3\0\2\72\26\0\6\72\1\0\2\72"+
    "\1\u0194\25\72\2\0\5\72\3\0\2\72\26\0\5\72"+
    "\1\u0195\1\0\30\72\2\0\5\72\17\0\1\u0155\52\0"+
    "\1\u0156\1\u0157\5\0\2\u0196\1\0\2\72\26\0\5\72"+
    "\1\u0121\1\0\30\72\2\0\5\72\3\0\2\72\26\0"+
    "\4\72\1\u0197\1\72\1\0\30\72\2\0\5\72\3\0"+
    "\2\72\26\0\6\72\1\0\2\72\1\u0121\25\72\2\0"+
    "\5\72\26\0\1\230\55\0\2\3\26\0\6\3\1\0"+
    "\21\3\1\u0198\6\3\2\0\5\3\3\0\2\3\26\0"+
    "\6\3\1\0\2\3\1\u0199\25\3\2\0\5\3\3\0"+
    "\2\3\26\0\1\3\1\u019a\4\3\1\0\30\3\2\0"+
    "\5\3\3\0\2\3\26\0\1\3\1\u019b\4\3\1\0"+
    "\30\3\2\0\5\3\3\0\2\3\26\0\1\u019c\5\3"+
    "\1\0\30\3\2\0\5\3\3\0\2\3\26\0\6\3"+
    "\1\0\10\3\1\u019d\17\3\2\0\5\3\3\0\2\3"+
    "\26\0\6\3\1\0\2\3\1\u019e\25\3\2\0\5\3"+
    "\3\0\2\u018c\26\0\6\u018c\1\0\30\u018c\2\0\5\u018c"+
    "\3\0\2\3\26\0\6\3\1\0\2\3\1\u019f\25\3"+
    "\2\0\5\3\3\0\2\3\26\0\6\3\1\0\2\3"+
    "\1\u01a0\25\3\2\0\5\3\3\0\2\3\26\0\6\3"+
    "\1\0\7\3\1\u01a1\20\3\2\0\5\3\3\0\2\3"+
    "\26\0\6\3\1\0\10\3\1\u01a2\17\3\2\0\5\3"+
    "\3\0\2\3\26\0\6\3\1\0\13\3\1\u01a3\14\3"+
    "\2\0\5\3\3\0\2\72\26\0\6\72\1\0\2\72"+
    "\1\u01a4\25\72\2\0\5\72\3\0\2\72\26\0\6\72"+
    "\1\0\4\72\1\u01a5\23\72\2\0\5\72\3\0\2\72"+
    "\26\0\4\72\1\u01a6\1\72\1\0\30\72\2\0\5\72"+
    "\17\0\1\u0155\61\0\2\u0196\1\0\2\72\26\0\1\72"+
    "\1\u0121\4\72\1\0\30\72\2\0\5\72\3\0\2\3"+
    "\26\0\4\3\1\u01a7\1\3\1\0\30\3\2\0\5\3"+
    "\3\0\2\3\26\0\4\3\1\u01a8\1\3\1\0\30\3"+
    "\2\0\5\3\3\0\2\3\26\0\6\3\1\0\7\3"+
    "\1\u01a9\20\3\2\0\5\3\3\0\2\3\26\0\6\3"+
    "\1\0\10\3\1\u01aa\17\3\2\0\5\3\3\0\2\3"+
    "\26\0\6\3\1\0\6\3\1\u01ab\21\3\2\0\5\3"+
    "\3\0\2\3\26\0\2\3\1\u01ac\3\3\1\0\30\3"+
    "\2\0\5\3\3\0\2\3\26\0\6\3\1\0\10\3"+
    "\1\u01ad\17\3\2\0\5\3\3\0\2\3\26\0\4\3"+
    "\1\u01ae\1\3\1\0\30\3\2\0\5\3\3\0\2\3"+
    "\26\0\6\3\1\0\2\3\1\u01af\25\3\2\0\5\3"+
    "\3\0\2\72\26\0\6\72\1\0\7\72\1\u01b0\20\72"+
    "\2\0\5\72\3\0\2\72\26\0\6\72\1\0\15\72"+
    "\1\u01b1\12\72\2\0\5\72\3\0\2\72\26\0\5\72"+
    "\1\u01b2\1\0\30\72\2\0\5\72\3\0\2\3\26\0"+
    "\1\3\1\u0160\4\3\1\0\30\3\2\0\5\3\3\0"+
    "\2\3\26\0\6\3\1\0\1\3\1\123\26\3\2\0"+
    "\5\3\3\0\2\3\26\0\6\3\1\0\4\3\1\123"+
    "\23\3\2\0\5\3\3\0\2\3\26\0\6\3\1\0"+
    "\6\3\1\u01b3\21\3\2\0\5\3\3\0\2\3\26\0"+
    "\6\3\1\0\6\3\1\u01b4\21\3\2\0\5\3\3\0"+
    "\2\3\26\0\6\3\1\0\22\3\1\u01b5\5\3\2\0"+
    "\5\3\3\0\2\3\26\0\5\3\1\u01b6\1\0\30\3"+
    "\2\0\5\3\3\0\2\72\11\0\1\u01b7\1\u01b8\13\0"+
    "\6\72\1\0\30\72\1\u01b9\1\u01ba\5\72\2\u01bb\1\0"+
    "\2\72\26\0\4\72\1\u01bc\1\72\1\0\30\72\2\0"+
    "\5\72\3\0\2\72\26\0\6\72\1\0\22\72\1\u01bd"+
    "\5\72\2\0\5\72\3\0\2\3\26\0\6\3\1\0"+
    "\21\3\1\u01be\6\3\2\0\5\3\3\0\2\3\26\0"+
    "\6\3\1\0\15\3\1\u01bf\12\3\2\0\5\3\3\0"+
    "\2\3\26\0\6\3\1\0\23\3\1\u01c0\4\3\2\0"+
    "\5\3\16\0\1\u01b7\1\u01b8\52\0\1\u01b9\1\u01ba\5\0"+
    "\2\u01bb\70\u01b9\1\u01c1\10\u01b9\71\u01ba\1\u01c1\7\u01ba\15\0"+
    "\1\u01b8\52\0\1\u01b9\1\u01ba\5\0\2\u01bb\1\0\2\72"+
    "\26\0\1\72\1\u01c2\4\72\1\0\30\72\2\0\5\72"+
    "\3\0\2\72\26\0\6\72\1\0\4\72\1\u01c3\23\72"+
    "\2\0\5\72\3\0\2\3\26\0\1\u01c4\5\3\1\0"+
    "\30\3\2\0\5\3\3\0\2\3\26\0\6\3\1\0"+
    "\1\u01c5\27\3\2\0\5\3\3\0\2\3\5\0\1\u01c6"+
    "\20\0\6\3\1\0\30\3\2\0\5\3\2\u01c7\15\0"+
    "\1\u01b8\52\0\1\u01b9\1\u01ba\5\0\2\u01c8\1\0\2\72"+
    "\26\0\6\72\1\0\4\72\1\u01c9\23\72\2\0\5\72"+
    "\3\0\2\72\26\0\6\72\1\0\14\72\1\u011a\13\72"+
    "\2\0\5\72\3\0\2\3\26\0\6\3\1\0\3\3"+
    "\1\273\24\3\2\0\5\3\3\0\2\3\26\0\6\3"+
    "\1\0\3\3\1\u0109\24\3\2\0\5\3\6\0\1\u01ca"+
    "\63\0\1\u01cb\1\u01cc\5\0\2\u01c6\10\0\1\u01c6\66\0"+
    "\2\u01c7\15\0\1\u01b8\61\0\2\u01c8\1\0\2\72\26\0"+
    "\6\72\1\0\2\72\1\u01cd\25\72\2\0\5\72\3\0"+
    "\1\u01ce\27\0\6\u01ce\1\0\27\u01ce\4\0\4\u01ce\2\0"+
    "\70\u01cb\1\u01cf\10\u01cb\71\u01cc\1\u01cf\7\u01cc\1\0\2\72"+
    "\26\0\6\72\1\0\21\72\1\u01d0\6\72\2\0\5\72"+
    "\3\0\2\u01ce\6\0\1\u01d1\17\0\6\u01ce\1\0\30\u01ce"+
    "\2\0\5\u01ce\2\u01cf\11\0\1\u01d1\65\0\2\u01cf\1\0"+
    "\2\72\26\0\6\72\1\0\6\72\1\u01d2\21\72\2\0"+
    "\5\72\5\0\1\u01d3\76\0\2\72\26\0\6\72\1\0"+
    "\2\72\1\u01d4\25\72\2\0\5\72\3\0\2\72\26\0"+
    "\1\u01d5\5\72\1\0\30\72\2\0\5\72\3\0\2\72"+
    "\26\0\2\72\1\u01d6\3\72\1\0\30\72\2\0\5\72"+
    "\3\0\2\72\26\0\6\72\1\0\2\72\1\u01d7\25\72"+
    "\2\0\5\72\3\0\2\72\26\0\5\72\1\u011a\1\0"+
    "\30\72\2\0\5\72\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[26520];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\1\11\2\1\10\11\47\1\1\11"+
    "\2\0\7\1\6\11\3\0\1\1\1\0\1\11\4\0"+
    "\62\1\1\0\1\11\5\0\14\1\2\0\1\11\6\0"+
    "\1\11\105\1\1\0\1\1\6\0\70\1\2\0\1\11"+
    "\2\0\52\1\1\0\1\11\3\0\3\1\1\0\23\1"+
    "\1\0\13\1\1\0\3\1\1\0\25\1\1\0\40\1"+
    "\1\0\1\11\3\0\5\1\1\0\4\1\3\0\1\1"+
    "\3\0\1\1\2\0\1\1\1\0\1\1\1\11\4\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[471];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
public String lexeme;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 168) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 31: 
          { return IF;
          }
        case 71: break;
        case 63: 
          { return FUNCTION;
          }
        case 72: break;
        case 40: 
          { return ECHO;
          }
        case 73: break;
        case 69: 
          { lexeme=yytext(); return CAMPOS_DE_ACCESO;
          }
        case 74: break;
        case 3: 
          { lexeme=yytext(); return ENTERO;
          }
        case 75: break;
        case 18: 
          { lexeme=yytext(); return OPERADOR_ARITMETICO;
          }
        case 76: break;
        case 29: 
          { lexeme=yytext(); return PALABRARESERVADA;
          }
        case 77: break;
        case 26: 
          { lexeme=yytext(); return OPERASIG_ARRAY;
          }
        case 78: break;
        case 34: 
          { lexeme=yytext(); return CODIGO_HTML;
          }
        case 79: break;
        case 61: 
          { lexeme=yytext(); return CONSTANTE;
          }
        case 80: break;
        case 8: 
          { lexeme=yytext(); return DOSPUNTOS;
          }
        case 81: break;
        case 5: 
          { lexeme=yytext(); return DOLAR;
          }
        case 82: break;
        case 44: 
          { lexeme=yytext(); return VARIABLEPREDEFINIDA;
          }
        case 83: break;
        case 67: 
          { return PROTECTED;
          }
        case 84: break;
        case 10: 
          { lexeme=yytext(); return PARENTESIS_DERECHO;
          }
        case 85: break;
        case 68: 
          { return ENDFOREACH;
          }
        case 86: break;
        case 50: 
          { return PRINT;
          }
        case 87: break;
        case 53: 
          { return SWITCH;
          }
        case 88: break;
        case 45: 
          { lexeme=yytext(); return INICIO;
          }
        case 89: break;
        case 22: 
          { lexeme=yytext(); return VARIABLE;
          }
        case 90: break;
        case 25: 
          { lexeme=yytext(); return FIN;
          }
        case 91: break;
        case 65: 
          { return CONTINUE;
          }
        case 92: break;
        case 28: 
          { lexeme=yytext(); return OPERADOR_INCREMENTO;
          }
        case 93: break;
        case 24: 
          { lexeme=yytext(); return OPERADOR_LOGICO;
          }
        case 94: break;
        case 6: 
          { lexeme=yytext(); return PUNTO;
          }
        case 95: break;
        case 62: 
          { return PRIVATE;
          }
        case 96: break;
        case 41: 
          { lexeme=yytext(); return BOOLEANO;
          }
        case 97: break;
        case 38: 
          { return NULL;
          }
        case 98: break;
        case 55: 
          { return GLOBAL;
          }
        case 99: break;
        case 43: 
          { lexeme=yytext(); return VARIABLEPREDEFINIDA1;
          }
        case 100: break;
        case 37: 
          { lexeme=yytext(); return REAL;
          }
        case 101: break;
        case 60: 
          { return EXTENDS;
          }
        case 102: break;
        case 20: 
          { lexeme=yytext(); return OPERADOR_COMPARACION;
          }
        case 103: break;
        case 58: 
          { return INCLUDE;
          }
        case 104: break;
        case 12: 
          { lexeme=yytext(); return LLAVE_DERECHA;
          }
        case 105: break;
        case 11: 
          { lexeme=yytext(); return LLAVE_IZQUIERDA;
          }
        case 106: break;
        case 19: 
          { lexeme=yytext(); return OPERLOGNOT;
          }
        case 107: break;
        case 4: 
          { lexeme=yytext(); return PUNTO_Y_COMA;
          }
        case 108: break;
        case 52: 
          { return ELSEIF;
          }
        case 109: break;
        case 14: 
          { lexeme=yytext(); return CORCHETE_DERECHO;
          }
        case 110: break;
        case 35: 
          { return NEW;
          }
        case 111: break;
        case 30: 
          { return DO;
          }
        case 112: break;
        case 48: 
          { return CLASS;
          }
        case 113: break;
        case 39: 
          { return ELSE;
          }
        case 114: break;
        case 51: 
          { return RETURN;
          }
        case 115: break;
        case 2: 
          { lexeme=yytext(); return IDENTIFICADOR;
          }
        case 116: break;
        case 46: 
          { return WHILE;
          }
        case 117: break;
        case 42: 
          { return CASE;
          }
        case 118: break;
        case 21: 
          { lexeme=yytext(); return WHITE;
          }
        case 119: break;
        case 13: 
          { lexeme=yytext(); return CORCHETE_IZQUIERDO;
          }
        case 120: break;
        case 1: 
          { lexeme=yytext(); return ERROR;
          }
        case 121: break;
        case 32: 
          { lexeme=yytext(); return CADENA;
          }
        case 122: break;
        case 70: 
          { return MYSQLQUERY;
          }
        case 123: break;
        case 15: 
          { lexeme=yytext(); return AMPERSAND;
          }
        case 124: break;
        case 16: 
          { lexeme=yytext(); return INTERROGACION;
          }
        case 125: break;
        case 23: 
          { lexeme=yytext(); return OPERCOMBINADO_CAD;
          }
        case 126: break;
        case 17: 
          { lexeme=yytext(); return OPERADOR_ASIGNACION;
          }
        case 127: break;
        case 56: 
          { return PUBLIC;
          }
        case 128: break;
        case 36: 
          { return FOR;
          }
        case 129: break;
        case 49: 
          { return BREAK;
          }
        case 130: break;
        case 47: 
          { return CONST;
          }
        case 131: break;
        case 9: 
          { lexeme=yytext(); return PARENTESIS_IZQUIERDO;
          }
        case 132: break;
        case 27: 
          { lexeme=yytext(); return OPERCOMBINADO_ARITMETICO;
          }
        case 133: break;
        case 57: 
          { return DEFAULT;
          }
        case 134: break;
        case 54: 
          { return STATIC;
          }
        case 135: break;
        case 7: 
          { lexeme=yytext(); return COMA;
          }
        case 136: break;
        case 59: 
          { return FOREACH;
          }
        case 137: break;
        case 33: 
          { /*Ignore*/
          }
        case 138: break;
        case 64: 
          { return ENDWHILE;
          }
        case 139: break;
        case 66: 
          { return ENDSWITCH;
          }
        case 140: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
