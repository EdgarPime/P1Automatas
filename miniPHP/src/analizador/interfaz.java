/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * interfaz.java
 *
 * Created on 16/11/2011, 07:44:27 AM
 */

package analizador;
import javax.swing.JOptionPane;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.Reader;
import java.util.LinkedList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author Carlos
 */
public class interfaz extends javax.swing.JFrame {

    /** Creates new form interfaz */
    
    public interfaz() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("Analizar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel1.setText("Ingrese el texto");

        jLabel2.setText("Resultado");

        jButton2.setText("Limpiar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane2.setViewportView(jTextArea1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(11, 11, 11)
                .addComponent(jTextField1, javax.swing.GroupLayout.DEFAULT_SIZE, 398, Short.MAX_VALUE)
                .addGap(178, 178, 178))
            .addGroup(layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 444, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton2)
                            .addComponent(jButton1))
                        .addGap(66, 66, 66))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(125, 125, 125)
                        .addComponent(jButton1)
                        .addGap(36, 36, 36)
                        .addComponent(jButton2)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 57, Short.MAX_VALUE)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 265, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(38, 38, 38))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try{
             probarLexerFile();
        }
        catch (IOException ex){
            System.out.println(ex.getMessage());
        }
      
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        jTextField1.setText("");
        jTextArea1.setText("");
        
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new interfaz().setVisible(true);
            }
        });
    
    }
    public void probarLexerFile() throws IOException{
        
        int cont=0;
        int cont1=2;
        String cadena;
        //boolean verificar=false;
        //boolean verificar1=false;
        File fichero = new File ("fichero.txt");
        
        PrintWriter writer;
        
        try {
            
            writer = new PrintWriter(fichero);
            
            fichero=new File(jTextField1.getText()+".txt");
            String linea;
            if (fichero.exists()) {
                FileReader archivo =new FileReader(fichero);
                BufferedReader leer =new BufferedReader(archivo);
                linea=leer.readLine();
                
                while(linea!=null){
                    writer.println(linea.toLowerCase() + "\n");
                    linea=leer.readLine();
      
                }
            }
            
            writer.close();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(interfaz.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        if (fichero.exists() && jTextField1!=null) {
        Reader reader = new BufferedReader(new FileReader("fichero.txt"));
        Lexer lexer = new Lexer (reader);
        String resultado="";
        String resultado1="";
        String errores="";
        
        PrintWriter writer1;
        PrintWriter writer2;
        File salida = new File (jTextField1.getText()+".out.txt");
        File salida2 = new File ("ERRORES.txt");
        writer1 = new PrintWriter(salida);
        writer2 = new PrintWriter(salida2);
        
        while(true){
            Token token = lexer.yylex();
            if (token ==null){
                resultado=resultado+"EOF";
                jTextArea1.setText(resultado);
               
                    if(cont==0)//&& verificar==true && verificar1==true
                    {
                        
                        //se imprime el archivo
                        //indica que el archivo es correcto
                        JOptionPane.showMessageDialog(null, "¡El archivo es correto, pertenece a php!");

                        writer1.close();
                        writer2.close();
                        salida2.delete();
                    }
                    else
                    {
                        
                        //no se imprime el archivo
                        //imprime archivo con errores y el numero de linea que se encuentra
                         //error no existe inicio fin del programa
                        JOptionPane.showMessageDialog(null, "¡El archivo es incorrecto, no pertenece a php!");
                        writer2.println("SE ENCONTRARON "+cont+" ERRORES EN EL ARCHIVO");
                        writer1.close();
                        writer2.close();
                        salida.delete();
                    }
                
             
                
                return;
            }
            
            switch(token) {
                
                case ERROR:
                    resultado=resultado+ "Error, el token no pertenece a php " + lexer.lexeme + "\n";
                    errores="El token no pertenece a php " + lexer.lexeme + "\n";
                    cont++;
                    writer2.println(errores + " Error en la linea " + cont1/2);
                    break;
                
//                case ID: case INT:
//                    resultado=resultado+"TOKEN: " + token + " " + lexer.lexeme + "\n";
//                    break;
               
                    
                case PUNTO_Y_COMA:
                    resultado=resultado+"TOKEN: " + token + " " + lexer.lexeme + "\n";
                    writer1.print(lexer.lexeme);
                    //verificar=true;
                    break;
                    
                case INTERROGACION:
                    resultado=resultado+"TOKEN: " + token + " " + lexer.lexeme + "\n";
                    writer1.print(lexer.lexeme);
                    //verificar=true;
                    break;
                    
                case DOLAR:
                    resultado=resultado+"TOKEN: " + token + " " + lexer.lexeme + "\n";
                    writer1.print(lexer.lexeme);
                    //verificar=true;
                    break;
                    
                case PUNTO:
                    resultado=resultado+"TOKEN: " + token + " " + lexer.lexeme + "\n";
                    writer1.print(lexer.lexeme);
                    //verificar=true;
                    break;
                    
                case COMA:
                    resultado=resultado+"TOKEN: " + token + " " + lexer.lexeme + "\n";
                    writer1.print(lexer.lexeme);
                    //verificar=true;
                    break;
                    
                case DOSPUNTOS:
                    resultado=resultado+"TOKEN: " + token + " " + lexer.lexeme + "\n";
                    writer1.print(lexer.lexeme);
                    //verificar=true;
                    break;
                    
                case PARENTESIS_IZQUIERDO:
                    resultado=resultado+"TOKEN: " + token + " " + lexer.lexeme + "\n";
                    writer1.print(lexer.lexeme);
                    //verificar=true;
                    break;
                    
                case PARENTESIS_DERECHO:
                    resultado=resultado+"TOKEN: " + token + " " + lexer.lexeme + "\n";
                    writer1.print(lexer.lexeme);
                    //verificar=true;
                    break;
                    
                case LLAVE_IZQUIERDA:
                    resultado=resultado+"TOKEN: " + token + " " + lexer.lexeme + "\n";
                    writer1.print(lexer.lexeme);
                    //verificar=true;
                    break;
                
                
                case LLAVE_DERECHA:
                    resultado=resultado+"TOKEN: " + token + " " + lexer.lexeme + "\n";
                    writer1.print(lexer.lexeme);
                    //verificar=true;
                    break;
                    
                case CORCHETE_IZQUIERDO:
                    resultado=resultado+"TOKEN: " + token + " " + lexer.lexeme + "\n";
                    writer1.print(lexer.lexeme);
                    //verificar=true;
                    break;
                    
                case CORCHETE_DERECHO:
                    resultado=resultado+"TOKEN: " + token + " " + lexer.lexeme + "\n";
                    writer1.print(lexer.lexeme);
                    //verificar=true;
                    break;
                    
                case AMPERSAND:
                    resultado=resultado+"TOKEN: " + token + " " + lexer.lexeme + "\n";
                    writer1.print(lexer.lexeme);
                    //verificar=true;
                    break;
                    
                case OPERADOR_ARITMETICO:
                    resultado=resultado+"TOKEN: " + token + " " + lexer.lexeme + "\n";
                    writer1.print(lexer.lexeme);
                    //verificar=true;
                    break;
                    
                case OPERADOR_ASIGNACION:
                    resultado=resultado+"TOKEN: " + token + " " + lexer.lexeme + "\n";
                    writer1.print(lexer.lexeme);
                    //verificar=true;
                    break;
                    
                case OPERCOMBINADO_ARITMETICO:
                    resultado=resultado+"TOKEN: " + token + " " + lexer.lexeme + "\n";
                    writer1.print(lexer.lexeme);
                    //verificar=true;
                    break;
                    
                case OPERCOMBINADO_CAD:
                    resultado=resultado+"TOKEN: " + token + " " + lexer.lexeme + "\n";
                    writer1.print(lexer.lexeme);
                    //verificar=true;
                    break;
                    
                case OPERADOR_COMPARACION:
                    resultado=resultado+"TOKEN: " + token + " " + lexer.lexeme + "\n";
                    writer1.print(lexer.lexeme);
                    //verificar=true;
                    break;
                    
                case OPERADOR_INCREMENTO:
                    resultado=resultado+"TOKEN: " + token + " " + lexer.lexeme + "\n";
                    writer1.print(lexer.lexeme);
                    //verificar=true;
                    break;
                    
                case OPERADOR_LOGICO:
                    resultado=resultado+"TOKEN: " + token + " " + lexer.lexeme + "\n";
                    writer1.print(lexer.lexeme);
                    //verificar=true;
                    break;
                    
                case OPERLOGNOT:
                    resultado=resultado+"TOKEN: " + token + " " + lexer.lexeme + "\n";
                    writer1.print(lexer.lexeme);
                    //verificar=true;
                    break;
                    
                case OPERASIG_ARRAY:
                    resultado=resultado+"TOKEN: " + token + " " + lexer.lexeme + "\n";
                    writer1.print(lexer.lexeme);
                    //verificar=true;
                    break;
                    
                case PALABRARESERVADA:
                    resultado=resultado+"TOKEN: " + token + " " + lexer.lexeme + "\n";
                    writer1.print(lexer.lexeme);
                    //verificar=true;
                    break;
                    
                case CADENA:
                    resultado=resultado+"TOKEN: " + token + " " + lexer.lexeme + "\n";
                    writer1.print(lexer.lexeme.toString());
                    //verificar=true;
                    break;
                    
                case ENTERO:
                    resultado=resultado+"TOKEN: " + token + " " + lexer.lexeme + "\n";
                    writer1.print(lexer.lexeme);
                    //verificar=true;
                    break;
                    
                case REAL:
                    resultado=resultado+"TOKEN: " + token + " " + lexer.lexeme + "\n";
                    writer1.print(lexer.lexeme);
                    //verificar=true;
                    break;
                    
                case BOOLEANO:
                    resultado=resultado+"TOKEN: " + token + " " + lexer.lexeme + "\n";
                    writer1.print(lexer.lexeme.toUpperCase());
                    //verificar=true;
                    break;
                    
                case IDENTIFICADOR:
                    resultado=resultado+"TOKEN: " + token + " " + lexer.lexeme + "\n";
                    writer1.print(lexer.lexeme);
                    //verificar=true;
                    break;
                    
                case VARIABLEPREDEFINIDA:
                    resultado=resultado+"TOKEN: " + token + " " + lexer.lexeme + "\n";
                    //writer1.print(lexer.lexeme.toUpperCase());
                    String[] campos1=lexer.lexeme.split("\\[");
                    writer1.print(campos1[0].toUpperCase());
                    writer1.print("[");
                    writer1.print(campos1[1]);
                    //verificar=true;
                    break;
                    
                case VARIABLEPREDEFINIDA1:
                    resultado=resultado+"TOKEN: " + token + " " + lexer.lexeme + "\n";
                    writer1.print(lexer.lexeme);
                    //verificar=true;
                    break;
                    
                case VARIABLE:
                    resultado=resultado+"TOKEN: " + token + " " + lexer.lexeme + "\n";
                    writer1.print(lexer.lexeme);
                    //verificar=true;
                    break;
                    
                case CODIGO_SQL:
                    resultado=resultado+"TOKEN: " + token + " " + lexer.lexeme + "\n";
                    writer1.print(lexer.lexeme);
                    //verificar=true;
                    break;
                
                case CODIGO_HTML:
                    resultado=resultado+"TOKEN: " + token + " " + lexer.lexeme + "\n";
                    writer1.print(lexer.lexeme);
                    //verificar=true;
                    break;
                    
                case MYSQLQUERY:
                    resultado=resultado+"TOKEN: " + token + " " + lexer.lexeme + "\n";
                    writer1.print(lexer.lexeme);
                    //verificar=true;
                    break;
                    
                case CONSTANTE:
                    resultado=resultado+"TOKEN: " + token + " " + lexer.lexeme + "\n";
                    writer1.print(lexer.lexeme);
                    //verificar=true;
                    break;
                    
                case LLAMADAFUNCION:
                    resultado=resultado+"TOKEN: " + token + " " + lexer.lexeme + "\n";
                    writer1.print(lexer.lexeme);
                    //verificar=true;
                    break;
                    
                case SENTENCIA_IF:
                    resultado=resultado+"TOKEN: " + token + " " + lexer.lexeme + "\n";
                    writer1.print(lexer.lexeme);
                    //verificar=true;
                    break;
                    
                case SENTENCIA_WHILE:
                    resultado=resultado+"TOKEN: " + token + " " + lexer.lexeme + "\n";
                    writer1.print(lexer.lexeme);
                    //verificar=true;
                    break;
                    
                case SENTENCIA_SWITCH:
                    resultado=resultado+"TOKEN: " + token + " " + lexer.lexeme + "\n";
                    writer1.print(lexer.lexeme);
                    //verificar=true;
                    break;    
                
                case SENTENCIA_ELSEIF:
                    resultado=resultado+"TOKEN: " + token + " " + lexer.lexeme + "\n";
                    writer1.print(lexer.lexeme);
                    //verificar=true;
                    break;  
                    
                case WHITE:
                    resultado1= resultado1 + token+ " " + lexer.lexeme;
                    writer1.print(lexer.lexeme);
                    break;
                    
                case ENTER:
                    resultado1= resultado1 + token+ " " + lexer.lexeme;
                    writer1.print(lexer.lexeme);
                    cont1++;
                    break;
                    
                case CAMPOS_DE_ACCESO:
                    resultado=resultado+"TOKEN: " + token + " " + lexer.lexeme + "\n";
                    String[] campos=lexer.lexeme.split("\\[");
                    writer1.print(campos[0]);
                    writer1.print("[");
                    writer1.print(campos[1].toUpperCase());
 
                    break;
                    
                case FIN:
                    resultado=resultado+ "TOKEN: " + token  + " " + lexer.lexeme + "\n";
                    //verificar1=true;
                    writer1.print(lexer.lexeme);
                    break;
                    
                case INICIO:
                    resultado=resultado+ "TOKEN: " + token + " " + lexer.lexeme + "\n";
                    //verificar1=true;
                    writer1.print(lexer.lexeme);
                    break;
                    
                default:
                    resultado=resultado+ "TOKEN: " + token   + "\n";
                    writer1.print(token.toString().toLowerCase());
            }
        }
    }
    else
    {
       JOptionPane.showMessageDialog(null, "¡No existe el archivo de entrada!");     
    }
        
        
 }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables

}
