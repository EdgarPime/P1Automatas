package analizador;
import static analizador.Token.*;
%%
%class Lexer
%type Token


L = [a-zA-Z_]
D = [0-9]

//TOKEN PARA SIGNOS DE PUNTUACION
PUNTOYCOMA=(";")
DOLAR=("$")
PUNTO=(".")
COMA=(",")
DOSPUNTOS=(":")
PARENIZQ=("(")
PARENDER=(")")
LLAVEIZQ=("{")
LLAVEDER=("}")
CORCHIZQ=("[")
CORCHDER=("]")
AMPERSAND=("&")
PUNTUACION={PUNTO}{COMA}

//TOKEN PARA OPERADORES
OPERASIGNACION=("=")
OPERARITMETICO=("+")|("*")|("-")|("/")|("%")|("**")
OPERCOMBINADO_ARIT=("+=")|("-=")|("*=")|("/=")|("**=")|("%=")
OPERCOMBINADO_CAD=(".=")
OPERCOMPARACION=("==")|("===")|("!=")|("<>")|("!==")|("<")|(">")|("<=")|(">=")|("<=>")
OPERINCDEC=("++")|("--")
OPERLOGICO=("and")|("xor")|("or")|("&&")|("||")
OPERLOGNOT=("!")
OPERASIG_ARRAY=("=>")

//TOKEN PARA ESTRUCTURAS CONTROL
IF=("if")
ELSE=("else")
ELSEIF=("elseif")
WHILE=("while")
ENDWHILE=("endwhile")
FOR=("for")
SWITCH=("switch")
CASE=("case")
ENDSWITCH=("endswitch")
BREAK=("break")
DEFAULT=("default")
DO=("do")
FOREACH=("foreach")

//TOKEN PARA PALABRAS RESERVADAS
INICIO =("<?php")
FIN = ("?>")
ECHO = ("echo")
GLOBAL= ("global")
STATIC= ("static")
CONST= ("const")
PRINT= ("print")
FUNCTION= ("function")
RETURN= ("return")
NULL= ("null"|"NULL")
ARRAY=("array"){PARENIZQ}((({ENTERO}|{REAL}|{CADENA})({COMA}({ENTERO}|{REAL}|{CADENA}))*)|(({CADENA}|{REAL}|{ENTERO}){OPERASIG_ARRAY}({CADENA}|{REAL}|{ENTERO})({COMA}))+(({CADENA}|{REAL}|{ENTERO}){OPERASIG_ARRAY}({CADENA}|{REAL}|{ENTERO})))?{WHITE}*{PARENDER}
ARRAY1=("array"){PARENIZQ}(({ENTERO}|{REAL}|{CADENA})({COMA}({ENTERO}|{REAL}|{CADENA}))*){PARENDER}
INCLUDE= ("include")
CONTINUE= ("continue")

//TOKEN PARA CLASES Y OBJETIVOS
CLASS= ("class")
PUBLIC= ("public")
PROTECTED= ("protected")
PRIVATE= ("private")
NEW= ("new")
EXTENDS= ("extends")

//TOKENS ESPECIALES
CADENA= {WHITE}*((("'").*("'"))|("\"")(~["\""])){WHITE}*
ENTERO= {WHITE}*("+"|"-")?([0-9]+|0[xX][0-9a-fA-F]+|0[bB][01]+){WHITE}*
REAL= {WHITE}*([+-])?(([0-9]+ | [0-9]+(".")[0-9]+) ([eE][+-])?[0-9]+){WHITE}*
IDENTIFICADOR= [a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*
BOOLEANO={WHITE}*(("true")|("false")){WHITE}*



//TOKEN DECLARACIONES VARIABLE///////////////////////////

VARIABLE= ({WHITE}*{DOLAR}{IDENTIFICADOR}{WHITE}*)
CONSTANTE= ({WHITE}*{CONST}{WHITE}*{IDENTIFICADOR}{WHITE}*)
TIPOVARIABLE=({GLOBAL}{WHITE}*)|(({STATIC}{WHITE}*)?(({PUBLIC}|{PROTECTED}|{PRIVATE}){WHITE}*)?)
VARIABLEPREDEFINIDA= {WHITE}*(("superglobals")|("$globals")|("$_server")|("$_get")|("$_post")|("$_files")|("$_request")|("$_session")|("$_env")|("$_cookie")|("$php_errormsg")|("$http_response_header")|("$argc")|("$argv")){WHITE}*
VARIABLEARRAY={VARIABLE}("["){ENTERO}("]")("["){ENTERO}("]")

//DECLARACION DE EXPRESIONES/////////////////////////

EXPRESIONGLOBAL= (({VARIABLE}{OPERASIGNACION}{WHITE}*)+({VARIABLE}
    |({VARIABLE}|{ENTERO}|{REAL})({OPERARITMETICO}({VARIABLE}|{ENTERO}|{REAL}))+
    |{CORCHIZQ}(({CADENA}|{ENTERO}|{REAL}){OPERASIG_ARRAY}({CADENA}|{ENTERO}|{REAL}){COMA}{WHITE}*)*{CORCHDER}
    |{FUNCIONANONIMA}
    |{LLAMADAFUNCION}
    |{NEW}{LLAMADAFUNCION}
    ){PUNTOYCOMA})
|{VARIABLE}({COMA}{VARIABLE})*{PUNTOYCOMA}
| {CONSTANTE}{OPERASIGNACION}{WHITE}*({CADENA}|{ENTERO}|{REAL}|{LLAMADAFUNCION}){PUNTOYCOMA}
|({ECHO}{WHITE}*(({VARIABLE}|{ENTERO}|{REAL})({OPERARITMETICO}({VARIABLE}|{ENTERO}|{REAL}))* 
    |{CADENA}({PUNTO}({VARIABLE}|{CADENA}))?
    |{FUNCIONANONIMA}
    |{LLAMADAFUNCION}
    ){WHITE}*{PUNTOYCOMA})

EXPRESIONLOCAL= ({TIPOVARIABLE}{WHITE}*{VARIABLE}{OPERASIGNACION})+(
    {CADENA}
    |({VARIABLE}|{ENTERO}|{REAL})({OPERARITMETICO}({VARIABLE}|{ENTERO}|{REAL}))*){PUNTOYCOMA}
|{TIPOVARIABLE}{VARIABLE}({COMA}{VARIABLE})*{PUNTOYCOMA}



//DECLARACION DE ESTRUCTURAS////////////////////////////////////////


SENTENCIAIF={IF}{WHITE}*{PARENIZQ}{COMPARACION}{PARENDER}{WHITE}*{LLAVEIZQ}(.)*({BREAK}{PUNTOYCOMA})?{LLAVEDER}({SENTENCIAELSE})?

SENTENCIAELSE={ELSE}{WHITE}*{LLAVEIZQ}(.)*({BREAK}{PUNTOYCOMA})?{LLAVEDER}

SENTENCIAWHILE={WHILE}{WHITE}*{PARENIZQ}{COMPARACION}{PARENDER}{WHITE}*(({LLAVEIZQ}(.)*({BREAK}{PUNTOYCOMA})?{LLAVEDER})
    |({DOSPUNTOS}(.)*({BREAK}{PUNTOYCOMA})?{ENDWHILE}{WHITE}*{PUNTOYCOMA}))

SENTENCIADOWHILE={DO}{WHITE}*{LLAVEIZQ}(.)*({BREAK}{PUNTOYCOMA})?{LLAVEDER}{WHITE}*{WHILE}{WHITE}*{PARENIZQ}{WHITE}*{COMPARACION}{PARENDER}{WHITE}*{PUNTOYCOMA}

SENTENCIAFOR={FOR}{WHITE}*{PARENIZQ}({EXPRESION1FOR}({COMA}{EXPRESION1FOR})*)?{PUNTOYCOMA}({COMPARACION})?{PUNTOYCOMA}({EXPRESION2FOR}({COMA}{EXPRESION2FOR})*)?{WHITE}*{PARENDER}{WHITE}*(({LLAVEIZQ}(.)*({BREAK}{PUNTOYCOMA})?{WHITE}*{LLAVEDER})|({WHITE}*{PUNTOYCOMA}))

EXPRESION1FOR={VARIABLE}{OPERASIGNACION}({VARIABLE}|{REAL}|{ENTERO})

EXPRESION2FOR=({OPERINCDEC}{VARIABLE}
    |{WHITE}*{PRINT}{VARIABLE}
    |{WHITE}*{ECHO}{VARIABLE}
    |{VARIABLE}({OPERINCDEC}|({OPERCOMBINADO_ARIT}({VARIABLE}|{ENTERO}|{REAL})
        |{OPERCOMBINADO_CAD}{CADENA}))
    )

SENTENCIASWITCH={SWITCH}{WHITE}*{PARENIZQ}{VARIABLE}{PARENDER}{WHITE}*({LLAVEIZQ}{WHITE}*{BLOQUECASE}{WHITE}*{LLAVEDER}
        |{DOSPUNTOS}{BLOQUECASE}{ENDSWITCH}{PUNTOYCOMA})

BLOQUECASE=({CASE}({ENTERO}|{REAL}|{CADENA})({DOSPUNTOS}|{PUNTOYCOMA}){WHITE}*(.)*{WHITE}*({BREAK}{PUNTOYCOMA})?)+{WHITE}*({DEFAULT}({DOSPUNTOS}|{PUNTOYCOMA})(.)*({BREAK}{PUNTOYCOMA})?)?


COMPARACION= ({VARIABLE}|{CADENA}|{ENTERO}|{REAL}){OPERCOMPARACION}({VARIABLE}|{CADENA}|{ENTERO}|{REAL})({OPERLOGICO}{VARIABLE}{OPERCOMPARACION}({VARIABLE}|{CADENA}|{ENTERO}|{REAL}))*
|({OPERLOGNOT})?{VARIABLE}



//FUNCIONES/////////////////////////////////

FUNCIONES={TIPOVARIABLE}{FUNCTION}{IDENTIFICADOR}{PARENIZQ}({ARGUMENTOS})?{PARENDER}{WHITE}*{LLAVEIZQ}{WHITE}*{CADENA}({DEVOLVERVALORES})?{WHITE}*{LLAVEDER}

FUNCIONANONIMA={FUNCTION}{PARENIZQ}({ARGUMENTOS})?{PARENDER}{WHITE}*{LLAVEIZQ}{WHITE}*{CADENA}({DEVOLVERVALORES})?{WHITE}*{LLAVEDER}


ARGUMENTOS=({AMPERSAND})?{VARIABLE}({COMA}({AMPERSAND})?{VARIABLE}|{OPERASIGNACION}({REAL}|{ENTERO}|{CADENA}|{NULL}))*

DEVOLVERVALORES={RETURN}(({VARIABLE}|{ENTERO}|{REAL})({OPERARITMETICO}({VARIABLE}|{ENTERO}|{REAL}))*
    |{CADENA}){PUNTOYCOMA}




//LLAMADA FUNCION//////////////////////////////////////////////////////////////////////

LLAMADAFUNCION={IDENTIFICADOR}{PARENIZQ}({PASARARGUMENTOS})?{PARENDER}

PASARARGUMENTOS= ({VARIABLE}|{REAL}|{ENTERO})({COMA}({VARIABLE}|{REAL}|{ENTERO})|{OPERARITMETICO}({VARIABLE}|{REAL}|{ENTERO}))*
|{CADENA}


//CLASE/////////////////////////////////////////////////////////////////////////

CLASE={CLASS}{WHITE}*{IDENTIFICADOR}({EXTENDS}{IDENTIFICADOR})?{LLAVEIZQ}{WHITE}*({ATRIBUTOS}|{METODOS})*{WHITE}*{LLAVEDER}

ATRIBUTOS={TIPOVARIABLE}{VARIABLE}{PUNTOYCOMA}

//METODOS={FUNCIONES}
METODOS={TIPOVARIABLE}{FUNCTION}{IDENTIFICADOR}{PARENIZQ}({ARGUMENTOS})?{PARENDER}

WHITE=[ \t\r\n]

%{
public String lexeme;
%}
%%
{WHITE} {/*Ignore*/}

//TOKEN PARA SIGNOS DE PUNTUACION

{PUNTOYCOMA} {return PUNTO_Y_COMA;}
{PUNTO} {return PUNTO;}
{COMA} {return COMA;}
{DOSPUNTOS} {return DOSPUNTOS;}
{PARENIZQ} {return PARENTESIS_IZQUIERDO;}
{PARENDER} {return PARENTESIS_DERECHO;}
{LLAVEIZQ} {return LLAVE_IZQUIERDA;}
{LLAVEDER} {return LLAVE_DERECHA;}
{CORCHIZQ} {return CORCHETE_IZQUIERDO;}
{CORCHDER} {return CORCHETE_DERECHO;}
{AMPERSAND} {return AMPERSAND;}

//TOKEN PARA OPERADORES
{OPERASIGNACION} {return OPERADOR_ASIGNACION;}
{OPERARITMETICO} {return OPERADOR_ARITMETICO;}
{OPERCOMBINADO_ARIT} {return OPERCOMBINADO_ARITMETICO;}
{OPERCOMBINADO_CAD} {return OPERCOMBINADO_CAD;}
{OPERCOMPARACION} {return OPERADOR_COMPARACION;}
{OPERINCDEC} {return OEPRADOR_INCREMENTO;}
{OPERLOGICO} {return OPERADOR_LOGICO;}
{OPERLOGNOT} {return OPERLOGNOT;}
{OPERASIG_ARRAY} {return OPERASIG_ARRAY;}


//TOKEN PARA ESTRUCTURAS CONTROL
{IF} {return IF;}
{ELSE} {return ELSE;}
{WHILE} {return WHILE;}
{ENDWHILE} {return ENDWHILE;}
{FOR} {return FOR;}
{SWITCH} {return SWITCH;}
{CASE} {return CASE;}
{ENDSWITCH} {return ENDSWITCH;}
{BREAK} {return BREAK;}
{DEFAULT} {return DEFAULT;}
{DO} {return DO;}

//TOKEN PARA PALABRAS RESERVADAS
{INICIO} {return INICIO;}
{FIN} {return FIN;}
{ECHO} {return ECHO;} 
{GLOBAL} {return GLOBAL;}
{STATIC} {return STATIC;}
{CONST} {return CONST;}
{PRINT} {return PRINT;}
{FUNCTION} {return FUNCTION;}
{RETURN} {return RETURN;}
{NULL} {return NULL;}
{INCLUDE} {return INCLUDE;} 
{CONTINUE} {return CONTINUE;} 

//TOKEN PARA CLASES Y OBJETIVOS
{CLASS} {return CLASS;}
{PUBLIC} {return PUBLIC;}
{PROTECTED} {return PROTECTED;}
{PRIVATE} {return PRIVATE;}
{NEW} {return NEW;}
{EXTENDS} {return EXTENDS;}

//TOKENS ESPECIALES
{CADENA} {return CADENA;}
{ENTERO} {return ENTERO;}
{REAL} {return REAL;}
{BOOLEANO} {return BOOLEANO;}
{IDENTIFICADOR} {return IDENTIFICADOR;}
{ARRAY} {return ARRAY;}


//TOKEN DECLARACIONES VARIABLE

{VARIABLEPREDEFINIDA} {return VARIABLEPREDEFINIDA;}
{VARIABLE} {return VARIABLE;}
{CONSTANTE} {return CONSTANTE;}
{TIPOVARIABLE} {return TIPOVARIABLE;}
{VARIABLEARRAY} {return VARIABLEARRAY;}

//TOKEN TIPOS DE VARIABLES
{VARIABLE}{WHITE}*{OPERASIGNACION}{BOOLEANO} {return VARIABLE_LOGICA;}
{VARIABLE}{WHITE}*{OPERASIGNACION}{ENTERO} {return VARIABLE_ENTERO;}
{VARIABLE}{WHITE}*{OPERASIGNACION}{REAL} {return VARIABLE_REAL;}
{VARIABLE}{WHITE}*{OPERASIGNACION}{CADENA} {return VARIABLE_CADENA;}
//{EXPRESIONGLOBAL} {return EXPRESIONGLOBAL;}

//TOKEN PARA LAS SENTENCIAS DE ESTRUCTURA DE CONTROL

{IF}{WHITE}*{PARENIZQ}{COMPARACION}{PARENDER}{WHITE}* {return SENTENCIA_IF;}
{ELSEIF}{WHITE}*{PARENIZQ}{COMPARACION}{PARENDER}{WHITE}* {return SENTENCIA_ELSEIF;}
{WHILE}{WHITE}*{PARENIZQ}{COMPARACION}{PARENDER} {return SENTENCIA_WHILE;}
{FOR}{WHITE}*{PARENIZQ}({EXPRESION1FOR}({COMA}{EXPRESION1FOR})*)?{PUNTOYCOMA}({COMPARACION})?{PUNTOYCOMA}({EXPRESION2FOR}({COMA}{EXPRESION2FOR})*)?{WHITE}*{PARENDER} {return SENTENCIA_FOR;}
{SWITCH}{WHITE}*{PARENIZQ}{VARIABLE}{PARENDER} {return SENTENCIA_SWITCH;}
{CASE}({ENTERO}|{REAL}|{CADENA})({DOSPUNTOS}|{PUNTOYCOMA}){WHITE}* {return SENTENCIA_CASE;}
{FOREACH}{WHITE}*{PARENIZQ}({VARIABLE}|{ARRAY1}){WHITE}*("as"){WHITE}*({VARIABLE}|{ARRAY1})({OPERASIG_ARRAY}{VARIABLE})?{PARENDER} {return SENTENCIA_FOREACH;}

//TOKEN PARA LAS FUNCIONES
{TIPOVARIABLE}{FUNCTION}{IDENTIFICADOR}{PARENIZQ}({ARGUMENTOS})?{PARENDER} {return FUNCION;}
{LLAMADAFUNCION} {return LLAMADAFUNCION;}
{CLASE} {return CLASE;}

//TOKEN PARA COMENTARIOS
("/*").*("*/") {return COMENTARIO;}
("//").*(\n) {return COMENTARIO2;}

{INICIO} {return INICIO;}
{FIN} {return FIN;}

//EXPRESIONES GLOBALES


//{L}({L}|{D})* {lexeme=yytext(); return ID;}
//(("+"|"-"){D}+|{D}+) {lexeme=yytex$t(); return INT;}

. {return ERROR;}