package analizador;
import static analizador.Token.*;
%%
%class Lexer
%type Token


L = [a-zA-Z_]
D = [0-9]

//TOKEN PARA SIGNOS DE PUNTUACION
PUNTOYCOMA=(";")
DOLAR=("$")
PUNTO=(".")
COMA=(",")
DOSPUNTOS=(":")
PARENIZQ=("(")
PARENDER=(")")
LLAVEIZQ=("{")
LLAVEDER=("}")
CORCHIZQ=("[")
CORCHDER=("]")
AMPERSAND=("&")
PUNTUACION={PUNTO}{COMA}

//TOKEN PARA OPERADORES
OPERASIGNACION=("=")
OPERARITMETICO=("+")|("*")|("-")|("/")|("%")|("**")
OPERCOMBINADO_ARIT=("+=")|("-=")|("*=")|("/=")|("**=")|("%=")
OPERCOMBINADO_CAD=(".=")
OPERCOMPARACION=("==")|("===")|("!=")|("<>")|("!==")|("<")|(">")|("<=")|(">=")|("<=>")
OPERINCDEC=("++")|("--")
OPERLOGICO=("and")|("xor")|("or")|("&&")|("||")
OPERLOGNOT=("!")
OPERASIG_ARRAY=("=>")

//TOKEN PARA ESTRUCTURAS CONTROL
IF=("if")
ELSE=("else")
WHILE=("while")
ENDWHILE=("endwhile")
FOR=("for")
SWITCH=("switch")
CASE=("case")
ENDSWITCH=("endswitch")
BREAK=("break")
CONTINUAR=("continue")
DEFAULT=("default")
DO=("do")

//TOKEN PARA PALABRAS RESERVADAS
INICIO =("<?php")
FIN = ("?>")
ECHO = ("echo")
GLOBAL= ("global")
STATIC= ("static")
CONST= ("const")
PRINT= ("print")
FUNCTION= ("function")
RETURN= ("return")
NULL= ("null"|"NULL")

//TOKEN PARA CLASES Y OBJETIVOS
CLASS= ("class")
PUBLIC= ("public")
PROTECTED= ("protected")
PRIVATE= ("private")
NEW= ("new")
EXTENDS= ("extends")

//TOKENS ESPECIALES
CADENA= {WHITE}*(((("'").*("'"))|((\").*(\")))){WHITE}*
ENTERO= {WHITE}*[0-9]*{WHITE}*
REAL= {WHITE}*[0-9]+(".")[0-9]+{WHITE}*
IDENTIFICADOR= {WHITE}*[a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*{WHITE}*




//TOKEN DECLARACIONES VARIABLE///////////////////////////

VARIABLE= ({WHITE}*{DOLAR}{IDENTIFICADOR}{WHITE}*)
CONSTANTE= ({WHITE}*{CONST}{IDENTIFICADOR}{WHITE}*)
TIPOVARIABLE=({GLOBAL}{WHITE}*)|({STATIC}?{WHITE}*({PUBLIC}|{PROTECTED}|{PRIVATE})?){WHITE}*



//DECLARACION DE EXPRESIONES/////////////////////////

EXPRESIONGLOBAL= (({VARIABLE}{OPERASIGNACION}{WHITE}*)+({CADENA}
    |({VARIABLE}|{ENTERO}|{REAL})({OPERARITMETICO}({VARIABLE}|{ENTERO}|{REAL}))*
    |{CORCHIZQ}(({CADENA}|{ENTERO}|{REAL}){OPERASIG_ARRAY}({CADENA}|{ENTERO}|{REAL}){COMA}{WHITE}*)*{CORCHDER}
    |{FUNCIONANONIMA}
    |{LLAMADAFUNCION}
    |{NEW}{LLAMADAFUNCION}
    ){PUNTOYCOMA})
|{VARIABLE}({COMA}{VARIABLE})*{PUNTOYCOMA}
| {CONSTANTE}{OPERASIGNACION}{WHITE}*({CADENA}|{ENTERO}|{REAL}|{LLAMADAFUNCION}){PUNTOYCOMA}
|({ECHO}{WHITE}*(({VARIABLE}|{ENTERO}|{REAL})({OPERARITMETICO}({VARIABLE}|{ENTERO}|{REAL}))* 
    |{CADENA}({PUNTO}({VARIABLE}|{CADENA}))?
    |{FUNCIONANONIMA}
    |{LLAMADAFUNCION}
    ){WHITE}*{PUNTOYCOMA})

EXPRESIONLOCAL= ({TIPOVARIABLE}{WHITE}*{VARIABLE}{OPERASIGNACION})+(
    {CADENA}
    |({VARIABLE}|{ENTERO}|{REAL})({OPERARITMETICO}({VARIABLE}|{ENTERO}|{REAL}))*){PUNTOYCOMA}
|{TIPOVARIABLE}{VARIABLE}({COMA}{VARIABLE})*{PUNTOYCOMA}



//DECLARACION DE ESTRUCTURAS////////////////////////////////////////

SENTENCIAIF={IF}{WHITE}*{PARENIZQ}{COMPARACION}{PARENDER}{WHITE}*{LLAVEIZQ}(.)*({BREAK}{PUNTOYCOMA})?{LLAVEDER}({SENTENCIAELSE})?

SENTENCIAELSE={ELSE}{WHITE}*{LLAVEIZQ}(.)*({BREAK}{PUNTOYCOMA})?{LLAVEDER}

SENTENCIAWHILE={WHILE}{WHITE}*{PARENIZQ}{COMPARACION}{PARENDER}{WHITE}*(({LLAVEIZQ}{CADENA}({BREAK}{PUNTOYCOMA})?{LLAVEDER})
    |({DOSPUNTOS}{CADENA}({BREAK}{PUNTOYCOMA})?{ENDWHILE}{WHITE}*{PUNTOYCOMA}))

SENTENCIADOWHILE={DO}{WHITE}*{LLAVEIZQ}{CADENA}({BREAK}{PUNTOYCOMA})?{LLAVEDER}{WHITE}*{WHILE}{WHITE}*{PARENIZQ}{WHITE}*{COMPARACION}{PARENDER}{WHITE}*{PUNTOYCOMA}

SENTENCIAFOR={FOR}{WHITE}*{PARENIZQ}({EXPRESION1FOR}({COMA}{EXPRESION1FOR})*)?{PUNTOYCOMA}({COMPARACION})?{PUNTOYCOMA}({EXPRESION2FOR}({COMA}{EXPRESION2FOR})*)?{WHITE}*{PARENDER}{WHITE}*(({LLAVEIZQ}{CADENA}({BREAK}{PUNTOYCOMA})?{WHITE}*{LLAVEDER})|({WHITE}*{PUNTOYCOMA}))

EXPRESION1FOR={VARIABLE}{OPERASIGNACION}({VARIABLE}|{REAL}|{ENTERO})

EXPRESION2FOR=({OPERINCDEC}{VARIABLE}
    |{WHITE}*{PRINT}{VARIABLE}
    |{WHITE}*{ECHO}{VARIABLE}
    |{VARIABLE}({OPERINCDEC}|({OPERCOMBINADO_ARIT}({VARIABLE}|{ENTERO}|{REAL})
        |{OPERCOMBINADO_CAD}{CADENA}))
    )

SENTENCIASWITCH={SWITCH}{WHITE}*{PARENIZQ}{VARIABLE}{PARENDER}{WHITE}*({LLAVEIZQ}{WHITE}*{BLOQUECASE}{WHITE}*{LLAVEDER}
        |{DOSPUNTOS}{BLOQUECASE}{ENDSWITCH}{PUNTOYCOMA})

BLOQUECASE=({CASE}({ENTERO}|{REAL}|{CADENA})({DOSPUNTOS}|{PUNTOYCOMA}){WHITE}*{CADENA}{WHITE}*({BREAK}{PUNTOYCOMA})?)+{WHITE}*({DEFAULT}({DOSPUNTOS}|{PUNTOYCOMA}){CADENA}({BREAK}{PUNTOYCOMA})?)?


COMPARACION= ({VARIABLE}|{CADENA}|{ENTERO}|{REAL}){OPERCOMPARACION}({VARIABLE}|{CADENA}|{ENTERO}|{REAL})({OPERLOGICO}{VARIABLE}{OPERCOMPARACION}({VARIABLE}|{CADENA}|{ENTERO}|{REAL}))*
|({OPERLOGNOT})?{VARIABLE}



//FUNCIONES/////////////////////////////////

FUNCIONES={TIPOVARIABLE}{FUNCTION}{IDENTIFICADOR}{PARENIZQ}({ARGUMENTOS})?{PARENDER}{WHITE}*{LLAVEIZQ}{WHITE}*{CADENA}({DEVOLVERVALORES})?{WHITE}*{LLAVEDER}

FUNCIONANONIMA={FUNCTION}{PARENIZQ}({ARGUMENTOS})?{PARENDER}{WHITE}*{LLAVEIZQ}{WHITE}*{CADENA}({DEVOLVERVALORES})?{WHITE}*{LLAVEDER}


ARGUMENTOS=({AMPERSAND})?{VARIABLE}({COMA}({AMPERSAND})?{VARIABLE}|{OPERASIGNACION}({REAL}|{ENTERO}|{CADENA}|{NULL}))*

DEVOLVERVALORES={RETURN}(({VARIABLE}|{ENTERO}|{REAL})({OPERARITMETICO}({VARIABLE}|{ENTERO}|{REAL}))*
    |{CADENA}){PUNTOYCOMA}




//LLAMADA FUNCION//////////////////////////////////////////////////////////////////////

LLAMADAFUNCION={IDENTIFICADOR}{PARENIZQ}({PASARARGUMENTOS})?{PARENDER}

PASARARGUMENTOS= ({VARIABLE}|{REAL}|{ENTERO})({COMA}({VARIABLE}|{REAL}|{ENTERO})|{OPERARITMETICO}({VARIABLE}|{REAL}|{ENTERO}))*
|{CADENA}


//CLASE/////////////////////////////////////////////////////////////////////////

CLASE={CLASS}{WHITE}*{IDENTIFICADOR}({EXTENDS}{IDENTIFICADOR})?{LLAVEIZQ}{WHITE}*({ATRIBUTOS}|{METODOS})*{WHITE}*{LLAVEDER}

ATRIBUTOS={TIPOVARIABLE}{VARIABLE}{PUNTOYCOMA}

METODOS={FUNCIONES}


WHITE=[ \t\r\n]

%{
public String lexeme;
%}
%%
{WHITE} {/*Ignore*/}
"=" {return ASSIGN;}
"==" {return EQUALS;}
"+" {return SUMA;}
"*" {return MULT;}
"-" {return RESTA;}
"/" {return DIV;}


({INICIO}{WHITE}*(.)*{FIN}) {return CORRECTO;}


//EXPRESIONES GLOBALES



{SENTENCIAIF} {return PRUEBA;}

{EXPRESION1FOR} {return VARIABLE;}

{IDENTIFICADOR} {return IDENTIFICADOR;}
{PUNTOYCOMA} {return PUNTOYCOMA;} 
{NEW} {lexeme=yytext();return NEW;}
{L}({L}|{D})* {lexeme=yytext(); return ID;}
//(("+"|"-"){D}+|{D}+) {lexeme=yytex$t(); return INT;}

. {return ERROR;}